/*
Navicat MySQL Data Transfer

Source Server         : 5.59
Source Server Version : 50721
Source Host           : 192.168.5.59:3306
Source Database       : fullstack

Target Server Type    : MYSQL
Target Server Version : 50721
File Encoding         : 65001

Date: 2018-03-22 10:33:23
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for fs_account
-- ----------------------------
DROP TABLE IF EXISTS `fs_account`;
CREATE TABLE `fs_account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名',
  `user_age` int(3) DEFAULT NULL COMMENT '年龄',
  `user_password` varchar(32) NOT NULL DEFAULT '' COMMENT '密码MD5',
  `user_photo` varchar(255) DEFAULT NULL COMMENT '头像',
  `user_email` varchar(255) DEFAULT NULL COMMENT '邮箱',
  `create_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `role_id` int(11) NOT NULL DEFAULT '2' COMMENT '角色id',
  `user_score` int(11) NOT NULL DEFAULT '0' COMMENT '用户积分',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='账户';

-- ----------------------------
-- Records of fs_account
-- ----------------------------
INSERT INTO `fs_account` VALUES ('8', 'admin', '20', '21232f297a57a5a743894a0e4a801fc3', null, '222222', '2018-03-21 18:45:00', '2018-03-21 18:45:00', '1', '0');

-- ----------------------------
-- Table structure for fs_article
-- ----------------------------
DROP TABLE IF EXISTS `fs_article`;
CREATE TABLE `fs_article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `article_title` varchar(255) DEFAULT NULL COMMENT '标题',
  `article_desc` varchar(255) NOT NULL COMMENT '描述/简要',
  `article_content` longtext COMMENT '文章内容',
  `pub_user` int(11) NOT NULL DEFAULT '0' COMMENT '发布人',
  `create_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '发布时间',
  `update_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '文章更新时间',
  `classify_id` int(11) NOT NULL DEFAULT '0' COMMENT '所属分类',
  `type_id` int(11) NOT NULL DEFAULT '0' COMMENT '所属类型1文章2问题',
  `views` int(11) DEFAULT NULL COMMENT '浏览量',
  PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COMMENT='文章';

-- ----------------------------
-- Records of fs_article
-- ----------------------------
INSERT INTO `fs_article` VALUES ('1', '一道面试题就能测出你的javascript水平', '\n      这是一道非常好的面试题， 考察以下知识点:1，this的指向 2，原型(prototype)以及原型链 3，继承 4，引用 要解出这道题，要理解以下几句话就可以了： 1，每一...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 475px; max-height: 648px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 136.42000000000002%;\"/>\n<div class=\"image-view\" data-width=\"475\" data-height=\"648\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-1cc56e17e177e1c2\" data-original-width=\"475\" data-original-height=\"648\" data-original-format=\"image/jpeg\" data-original-filesize=\"32454\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">web前端学习群，189394454，每天都会有干货分享</div>\n</div><br/>\n<p>这是一道非常好的面试题， 考察以下知识点:<br/>\n1，this的指向</p>\n\n<p>2，原型(prototype)以及原型链</p>\n<p>3，继承</p>\n<p>4，引用</p>\n<p>要解出这道题，要理解以下几句话就可以了：</p>\n<p>1，每一个构造函数，都有一个原型[[prototype]]属性 指向构造函数的原型对象</p>\n<p>2，每一个实例生成的时候，都会在内存中产生一块新的堆内存</p>\n<p>3，每一实例都有一个隐式原型<strong>proto</strong> 指向构造函数的原型对象</p>\n<p>4，this的指向 取决于this调用时的位置, 在这道题中， 也可以简单理解为， 谁调用方法， this就指向哪个对象</p>\n<p>5，数组和字面量对象 都是 引用</p>\n<p>6，原型链的查找规则： 就近原则</p>\n<ol>\n<li><p>当实例上存在属性时， 用实例上的</p></li>\n<li><p>如果实例不存在，顺在原型链，往上查找，如果存在，就使用原型链的</p></li>\n<li><p>如果原型链都不存在，就用Object原型对象上的</p></li>\n<li><p>如果Object原型对象都不存在， 就是undefined</p></li>\n</ol>\n<p>为了帮助大家， 我贴出课堂上的示意图， 如果有不理解的，欢迎互动，交流</p>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 640px; max-height: 384px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 60.0%;\"/>\n<div class=\"image-view\" data-width=\"640\" data-height=\"384\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-47d0144ff1b7b299\" data-original-width=\"640\" data-original-height=\"384\" data-original-format=\"image/jpeg\" data-original-filesize=\"25710\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><br/>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 640px; max-height: 441px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 68.91000000000001%;\"/>\n<div class=\"image-view\" data-width=\"640\" data-height=\"441\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-ce5002a22c10610e\" data-original-width=\"640\" data-original-height=\"441\" data-original-format=\"image/jpeg\" data-original-filesize=\"31649\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div>\n\n          ', '0', '2018-03-15 10:48:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('2', '使用GitHub（一）：添加SSHkey', '\n      使用GitHub（一）：添加SSHkey 本文简单介绍使用GitHub对代码进行版本控制，包括添加SSHkey、配置Git、使用Git创建版本库并在GitHub上进行管理，主...\n    ', '\n            <h1>使用GitHub（一）：添加SSHkey</h1>\n<blockquote>\n<ul>\n<li>本文简单介绍使用GitHub对代码进行版本控制，包括<strong>添加SSHkey</strong>、<strong>配置Git</strong>、<strong>使用Git创建版本库</strong>并在GitHub上进行管理，主要目的是对学习内容进行总结以及方便日后查阅。</li>\n<li>详细教程和原理可以参考<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"nofollow\">廖雪峰的Git教程</a>或<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"nofollow\">猴子都能看懂的Git教程</a>。</li>\n<li>本文版权归马涛涛所有。</li>\n<li>本文所引用的图片和文字版权归原作者所有，侵权删。</li>\n<li>如有错误请在下方评论区指出，欢迎积极讨论。</li>\n</ul>\n</blockquote>\n<hr/>\n<h2>添加SSHkey</h2>\n<blockquote>\n<ul>\n<li>简单说，SSH是一种<strong>网络协议</strong>，用于计算机之间的<strong>加密登录</strong>。</li>\n<li>如果一个用户从本地计算机，<strong>使用SSH</strong>协议登录另一台远程计算机，我们就可以认为，这种登录是<strong>安全</strong>的，即使被中途截获，密码也不会泄露。</li>\n<li>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者TatuYlonen设计了SSH协议，将<strong>登录信息全部加密</strong>，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</li>\n<li>在这里你只需要知道使用GitHub之前需要添加SSHkey，用来验证GitHub远程仓库就可以了，如果想深入了解原理，参考<a href=\"https://link.jianshu.com?t=%25EF%25BC%2588https%3A%2F%2Fhelp.github.com%2Farticles%2Fgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent%2F%25EF%25BC%2589\" target=\"_blank\" rel=\"nofollow\">阮一峰SSH原理</a>。</li>\n</ul>\n</blockquote>\n<p>步骤：</p>\n<ol>\n<li>进入 <a href=\"https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fsettings%2Fkeys\" target=\"_blank\" rel=\"nofollow\">https://github.com/settings/keys</a>\n</li>\n<li>\n<p>如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看</p>\n<br/>\n<div class=\"image-package\">\n<img src=\"https://s1.ax1x.com/2018/03/15/94Niz8.png\" src=\"https://s1.ax1x.com/2018/03/15/94Niz8.png\" alt=\"参考示例\" style=\"cursor: zoom-in;\"/><div class=\"image-caption\">参考示例</div>\n</div>\n</li>\n<li>点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看</li>\n</ol>\n<blockquote>\n<p>添加步骤参考<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fhelp.github.com%2Farticles%2Fgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent%2F\" target=\"_blank\" rel=\"nofollow\">这里</a></p>\n</blockquote>\n<ol start=\"4\">\n<li><p>打开 Git Bash</p></li>\n<li><p>复制并运行 <code>rm -rf ~/.ssh/*</code> 把现有的 ssh key都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。</p></li>\n<li><p>运行 <code>ssh-keygen -t rsa -b 4096 -C \"你的邮箱\"</code>，注意填写你的真实邮箱。</p></li>\n<li>\n<p>按回车三次<br/>\n</p>\n<p/>\n参考示例：<div class=\"image-package\">\n<img src=\"https://s1.ax1x.com/2018/03/15/94NAsg.png\" src=\"https://s1.ax1x.com/2018/03/15/94NAsg.png\" alt=\"参考示例\" style=\"cursor: zoom-in;\"/><div class=\"image-caption\">参考示例</div>\n</div>\n<br/>\n这时会在~目录下生成一个.ssh的隐藏文件 <div class=\"image-package\">\n<img src=\"https://s1.ax1x.com/2018/03/15/94NELQ.png\" src=\"https://s1.ax1x.com/2018/03/15/94NELQ.png\" alt=\"参考示例2\" style=\"cursor: zoom-in;\"/><div class=\"image-caption\">参考示例2</div>\n</div>\n</li>\n<li><p>运行 <code>cat ~/.ssh/id_rsa.pub</code>，得到一串东西，完整的复制这串东西</p></li>\n<li><p>回到上面第 3 步的页面，在 Title 输入「我的第一个 key」</p></li>\n<li>\n<p>在 Key 里粘贴刚刚你你复制的那串东西</p>\n<br/>\n<div class=\"image-package\">\n<img src=\"https://s1.ax1x.com/2018/03/15/94NZZj.png\" src=\"https://s1.ax1x.com/2018/03/15/94NZZj.png\" alt=\"复制key\" style=\"cursor: zoom-in;\"/><div class=\"image-caption\">复制key</div>\n</div>\n</li>\n<li><p>点击 Add SSH key</p></li>\n<li><p>回到 Git Bash</p></li>\n<li>\n<p>运行 <code>ssh -T git@github.com</code>，你可能会看到这样的提示：<br/>\n</p>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 120px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 13.819999999999999%;\"/>\n<div class=\"image-view\" data-width=\"868\" data-height=\"120\"><img src=\"//upload-images.jianshu.io/upload_images/11017215-930bc23329e6f29e..png\" data-original-width=\"868\" data-original-height=\"120\" data-original-format=\"image/png\" data-original-filesize=\"27338\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">提示</div>\n</div>\n<p/>\n</li>\n<li><p>输入 <code>yes</code> 回车</p></li>\n<li><p>然后如果你看到 <code>Permission denied (publickey).</code> 就说明你失败了，请回到第 1 步重来，是的，回到第 1步重来；如果你看到 <code>Hi FrankFang! You\'ve successfully authenticated, but GitHub does not provide shell access.</code></p></li>\n</ol>\n<div class=\"image-package\">\n<img src=\"https://s1.ax1x.com/2018/03/15/94Nuiq.png\" src=\"https://s1.ax1x.com/2018/03/15/94Nuiq.png\" alt=\"成功示例\" style=\"cursor: zoom-in;\"/><div class=\"image-caption\">成功示例</div>\n</div>\n<p>就说明你成功了！</p>\n<ol start=\"16\">\n<li>好了， 添加了一SSH key，接下来就会用到它。</li>\n</ol>\n<blockquote>\n<ul>\n<li>一台电脑只需要一个 SSH key</li>\n<li>一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题</li>\n<li>如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在    GitHub 上</li>\n<li>如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key</li>\n</ul>\n</blockquote>\n\n          ', '0', '2018-03-15 12:20:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('3', 'p5.js作品集（6）：斐波那契螺旋', '\n      作品链接 https://codepen.io/SampleTape/full/jzPxNW/ 主要方法 translate() rotate() arc() 斐波那契螺旋 ...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 375px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 50.0%;\"/>\n<div class=\"image-view\" data-width=\"750\" data-height=\"375\"><img src=\"//upload-images.jianshu.io/upload_images/9469540-b33941fa01ac41c7.gif\" data-original-width=\"750\" data-original-height=\"375\" data-original-format=\"image/gif\" data-original-filesize=\"592043\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Fibonacci Spiral.gif</div>\n</div>\n<h3>作品链接</h3>\n<p><a href=\"https://link.jianshu.com?t=https%3A%2F%2Fcodepen.io%2FSampleTape%2Ffull%2FjzPxNW%2F\" target=\"_blank\" rel=\"nofollow\">https://codepen.io/SampleTape/full/jzPxNW/</a></p>\n<h3>主要方法</h3>\n<ul>\n<li>translate()</li>\n<li>rotate()</li>\n<li>arc()</li>\n</ul>\n<h3>斐波那契螺旋</h3>\n<p>斐波那契螺旋线也称“黄金螺旋”，是根据斐波那契数列画出来的螺旋曲线，以斐波那契数为边的正方形中画一个90度的扇形，连起来的弧线就是斐波那契螺旋。</p>\n<h3>草图</h3>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 686px; max-height: 564px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 82.22%;\"/>\n<div class=\"image-view\" data-width=\"686\" data-height=\"564\"><img src=\"//upload-images.jianshu.io/upload_images/9469540-073687b62c59629f.png\" data-original-width=\"686\" data-original-height=\"564\" data-original-format=\"image/png\" data-original-filesize=\"46576\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Fibonacci Spiral草图.png</div>\n</div>\n<h3>过程分解</h3>\n<h4>一、定义一个空的斐波那契数组：</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> Fibonacci = [];\n</code></pre>\n<h4>二、初始化</h4>\n<p>默认情况下draw()函数会无限重复绘图， frameRate()函数可以设置每秒重复绘图的次数，就像电影每秒播放的帧数。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"/>)</span>{\n  createCanvas(windowWidth, windowHeight);<span class=\"hljs-comment\">//创建一块画板，画板的宽高与浏览器宽高相同</span>\n  background(<span class=\"hljs-number\">255</span>);<span class=\"hljs-comment\">//设置背景颜色为白色</span>\n  frameRate(<span class=\"hljs-number\">10</span>);<span class=\"hljs-comment\">//设置每秒10帧</span>\n}\n</code></pre>\n<h4>三、设置斐波那契螺旋的样式</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"/>)</span>{\n  ...\n  stroke(<span class=\"hljs-number\">0</span>);<span class=\"hljs-comment\">//线条颜色为黑色</span>\n  noFill();<span class=\"hljs-comment\">//无填充色</span>\n  strokeWeight(<span class=\"hljs-number\">5</span>);<span class=\"hljs-comment\">//线条宽度为5</span>\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight/<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//将坐标系移动到页面中央</span>\n  ...\n}\n</code></pre>\n<h4>四、开始绘制斐波那契螺旋</h4>\n<pre class=\"hljs php\"><code class=\"php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span><span class=\"hljs-params\">()</span></span>{\n  ...\n  stroke(<span class=\"hljs-number\">0</span>);\n  noFill();\n  strokeWeight(<span class=\"hljs-number\">5</span>);\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight/<span class=\"hljs-number\">2</span>);\n  ...\n  <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i ++){<span class=\"hljs-comment\">//绘制20段90度弧线</span>\n    <span class=\"hljs-keyword\">var</span> a = i &lt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">1</span> : Fibonacci[i<span class=\"hljs-number\">-1</span>] + Fibonacci[i<span class=\"hljs-number\">-2</span>];\n<span class=\"hljs-comment\">//这是条件表达式，如果i等于0或1，那么a等于1；否则等于斐波那契数列前两项的和</span>\n    Fibonacci.push(a);<span class=\"hljs-comment\">//将新得到的a加入斐波那契数列中</span>\n    arc(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,a * <span class=\"hljs-number\">2</span>,a * <span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,PI / <span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//绘制圆心在(0,0)直径为2*a度数为90度的弧形</span>\n\n    <span class=\"hljs-comment\">/**********以下是为下一段弧线做准备************/</span>\n    rotate(PI / <span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//将坐标系按顺时针旋转90度</span>\n    translate(-Fibonacci[i<span class=\"hljs-number\">-1</span>],<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">//将坐标系沿着X轴反向移动上一项的长度</span>\n  } \n}\n</code></pre>\n<h4>五、让斐波那契螺旋动起来</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"/>)</span>{\n  background(<span class=\"hljs-number\">255</span>);<span class=\"hljs-comment\">//将背景设置成白色，“遮盖”之前的绘图</span>\n  stroke(<span class=\"hljs-number\">0</span>);\n  noFill();\n  strokeWeight(<span class=\"hljs-number\">5</span>);\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight/<span class=\"hljs-number\">2</span>);\n  rotate(-PI / <span class=\"hljs-number\">6</span> * frameCount);<span class=\"hljs-comment\">//每帧旋转30度，frameCount表示当前已播放帧数</span>\n  <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i ++){\n    <span class=\"hljs-keyword\">var</span> a = i &lt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">1</span> : Fibonacci[i<span class=\"hljs-number\">-1</span>] + Fibonacci[i<span class=\"hljs-number\">-2</span>];\n    Fibonacci.push(a);\n    arc(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,a * <span class=\"hljs-number\">2</span>,a * <span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,PI / <span class=\"hljs-number\">2</span>);\n    rotate(PI / <span class=\"hljs-number\">2</span>);\n    translate(-Fibonacci[i<span class=\"hljs-number\">-1</span>],<span class=\"hljs-number\">0</span>); \n  } \n}\n</code></pre>\n<h3>完整代码</h3>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> Fibonacci = [];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"/>)</span>{\n  createCanvas(windowWidth, windowHeight);\n  background(<span class=\"hljs-number\">255</span>);\n  frameRate(<span class=\"hljs-number\">10</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"/>)</span>{\n  background(<span class=\"hljs-number\">255</span>);\n  stroke(<span class=\"hljs-number\">0</span>);\n  noFill();\n  strokeWeight(<span class=\"hljs-number\">5</span>);\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight/<span class=\"hljs-number\">2</span>);\n  rotate(-PI / <span class=\"hljs-number\">6</span> * frameCount);\n  <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i ++){\n    <span class=\"hljs-keyword\">var</span> a = i &lt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">1</span> : Fibonacci[i<span class=\"hljs-number\">-1</span>] + Fibonacci[i<span class=\"hljs-number\">-2</span>];\n    Fibonacci.push(a);\n    arc(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,a * <span class=\"hljs-number\">2</span>,a * <span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,PI / <span class=\"hljs-number\">2</span>);\n    rotate(PI / <span class=\"hljs-number\">2</span>);\n    translate(-Fibonacci[i<span class=\"hljs-number\">-1</span>],<span class=\"hljs-number\">0</span>); \n  } \n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">windowResized</span>(<span class=\"hljs-params\"/>)</span>{\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></pre>\n\n          ', '0', '2018-03-12 21:40:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('4', 'JS之匿名函数和闭包', '\n      函数表达式 有两种方式：1、函数声明2、函数表达式函数声明会提升，函数表达式不会。函数声明，在执行函数之前会先读取函数声明。 函数表达式 函数表达式和函数声明中没有函数名的函...\n    ', '\n            <h1>函数表达式</h1>\n<p>有两种方式：1、函数声明2、函数表达式<br/>\n<strong>函数声明会提升</strong>，函数表达式不会。<br/>\n函数声明，在执行函数之前会先读取函数声明。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\">sayhi()<span class=\"hljs-comment\">//‘hi’</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayhi</span>(<span class=\"hljs-params\"/>)</span>{\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'hi\'</span>);\n}\n<span class=\"hljs-comment\">//不会出错</span>\n</code></pre>\n<p>函数表达式</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\">sayhi()<span class=\"hljs-comment\">//‘hi’</span>\n<span class=\"hljs-keyword\">var</span>  sayhi=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'hi\'</span>);\n}\n<span class=\"hljs-comment\">//会出错</span>\n</code></pre>\n<p><strong>函数表达式和函数声明中没有函数名的函数，都是匿名函数</strong></p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">//不要这样做！,有的浏览器用第一个声明，有的用第二个</span>\n<span class=\"hljs-keyword\">if</span>(condition){\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"/>)</span>{\n    alert(<span class=\"hljs-string\">\"Hi!\"</span>);\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sayHi</span>(<span class=\"hljs-params\"/>)</span>{\n  alert(<span class=\"hljs-string\">\"Yo!\"</span>);\n  }\n}\n<span class=\"hljs-comment\">//可以这样做</span>\n<span class=\"hljs-keyword\">var</span> sayHi;\n <span class=\"hljs-keyword\">if</span>(condition){\n  sayHi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n   alert(<span class=\"hljs-string\">\"Hi!\"</span>);\n  };\n} <span class=\"hljs-keyword\">else</span> {\n  sayHi = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n  alert(<span class=\"hljs-string\">\"Yo!\"</span>);\n };\n}\n</code></pre>\n<h2>闭包</h2>\n<p>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的常见方式，是在一个函数内部创建另一个函数，通过另一个函数访问这个函数的局部变量。</p>\n<ul>\n<li>\n<strong>闭包可以让外侧函数的局部变量驻留内存，实现局部变量的累加</strong>,过度使用闭包导致性能下降,内存泄漏</li>\n</ul>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"/>)</span>{\n   <span class=\"hljs-keyword\">var</span> age=<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n         age++;\n        <span class=\"hljs-keyword\">return</span> age;\n    }  \n}\n<span class=\"hljs-keyword\">var</span> x=a();\n<span class=\"hljs-built_in\">console</span>.log(x())<span class=\"hljs-comment\">//2</span>\n<span class=\"hljs-built_in\">console</span>.log(x())<span class=\"hljs-comment\">//3</span>\n</code></pre>\n<ul>\n<li>由于作用域链的机制导致一个问题，循环里的<strong>匿名函数取得的任何变量都是最后一个值。</strong>闭包所保存的是整个变量对象，而不是某个特殊的变量。</li>\n</ul>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\"/>) </span>{\n    <span class=\"hljs-keyword\">var</span> arr = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        arr[i] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>) </span>{\n            <span class=\"hljs-keyword\">return</span> i;\n        };\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n<span class=\"hljs-keyword\">var</span> b = box(); <span class=\"hljs-comment\">//得到函数数组</span>\nalert(b.length); <span class=\"hljs-comment\">//得到函数集合长度</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b.length; i++) {\n    <span class=\"hljs-built_in\">console</span>.log(b[i]()); <span class=\"hljs-comment\">//输出每个函数的值，都是最后一个值55555</span>\n}\n</code></pre>\n<p>因为b中存的是匿名函数对象，当b<a href=\"\" target=\"_blank\">i</a>执行匿名函数时，box（）中的for循环早已执行完毕，i早已变成5.<br/>\n解决方法1：让匿名函数自我执行</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\"/>) </span>{\n    <span class=\"hljs-keyword\">var</span> arr = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        arr[i] = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> i;\n        })(i);\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n<span class=\"hljs-keyword\">var</span> b = box(); <span class=\"hljs-comment\">//得到函数数组</span>\nalert(b.length); <span class=\"hljs-comment\">//得到函数集合长度</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b.length; i++) {\n    <span class=\"hljs-built_in\">console</span>.log(b[i]); <span class=\"hljs-comment\">//输出0,12,3,4</span>\n}\n</code></pre>\n<p>解决方法2：匿名函数下在创建一个匿名函数，外侧匿名函数自执行</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\"/>) </span>{\n    <span class=\"hljs-keyword\">var</span> arr = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n        arr[i] = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">num</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>) </span>{\n                <span class=\"hljs-keyword\">return</span> num;<span class=\"hljs-comment\">//具体数字</span>\n            };\n        })(i)\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n<span class=\"hljs-keyword\">var</span> b = box(); <span class=\"hljs-comment\">//得到函数数组</span>\nalert(b.length); <span class=\"hljs-comment\">//得到函数集合长度</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; b.length; i++) {\n    <span class=\"hljs-built_in\">console</span>.log(b[i]()); <span class=\"hljs-comment\">//输出 01234</span>\n}\n</code></pre>\n<h4>this对象</h4>\n<p>this对象是在运行时基于函数的执行环境绑定的，如果this在全局范围就是window，如果在对象内部就指向这个对象。而闭包却在运行时指向window，因为闭包并不属于这个对象的属性或方法。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> user=<span class=\"hljs-string\">\'window\'</span>;\n<span class=\"hljs-keyword\">var</span> obj={\n    <span class=\"hljs-attr\">user</span>:<span class=\"hljs-string\">\'obj\'</span>,\n    <span class=\"hljs-attr\">getUserName</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.user;\n        }\n    }\n}\n<span class=\"hljs-built_in\">console</span>.log(obj.getUserName()());<span class=\"hljs-comment\">//window</span>\n</code></pre>\n<p>解决1：强制指向特定对象</p>\n<pre class=\"hljs cpp\"><code class=\"cpp\">console.<span class=\"hljs-built_in\">log</span>(obj.getUserName().call(obj));<span class=\"hljs-comment\">//obj</span>\nconsole.<span class=\"hljs-built_in\">log</span>(obj.getUserName().apply(obj));<span class=\"hljs-comment\">//obj</span>\n</code></pre>\n<p>解决2：复制this，得到上一个作用域的this对象</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> user=<span class=\"hljs-string\">\'window\'</span>;\n<span class=\"hljs-keyword\">var</span> obj={\n    <span class=\"hljs-attr\">user</span>:<span class=\"hljs-string\">\'obj\'</span>,\n    <span class=\"hljs-attr\">getUserName</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n        <span class=\"hljs-keyword\">var</span> that=<span class=\"hljs-keyword\">this</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">return</span> that.user;\n        }\n    }\n}\n<span class=\"hljs-built_in\">console</span>.log(obj.getUserName()());<span class=\"hljs-comment\">//obj</span>\n</code></pre>\n<h3>匿名函数仿块级作用域</h3>\n<p>for循环中的<code>var i</code>在外部也能访问</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\">count</span>) </span>{\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;count; i++) {}\n<span class=\"hljs-keyword\">var</span> i; <span class=\"hljs-comment\">//就算重新声明，也不会覆盖前面的值,除非重新初始化</span>\nalert(i);\n}\nbox(<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//2</span>\n</code></pre>\n<p>解决1：<br/>\n//模仿块级作用域(私有作用域)<br/>\n(function () {<br/>\n//这里是块级作用域<br/>\n})();</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">//使用块级作用域(私有作用域)改写</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\">count</span>) </span>{\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"/>) </span>{\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i&lt;count; i++) {}\n})();\nalert(i); <span class=\"hljs-comment\">//报错，无法访问</span>\n\n}\nbox(<span class=\"hljs-number\">2</span>);\n</code></pre>\n<p>解决2：ES6中使用let</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">box</span>(<span class=\"hljs-params\">count</span>) </span>{\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt;count; i++) {}\nalert(i); <span class=\"hljs-comment\">//i报错</span>\n\n}\nbox(<span class=\"hljs-number\">2</span>);\n</code></pre>\n<p>参考资料：JavaScript高级程序设计（第3版）</p>\n\n          ', '0', '2018-03-14 12:00:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('5', 'Javascript：数组常用方法整理', '\n      下面以var arr = [\'x\', \'u\', \'e\', \'y\', \'i\', \'n\', \'g\']为例 修改器方法： 1. arr.pop() && arr.push() 会改...\n    ', '\n            <p>下面以<code>var arr = [\'x\', \'u\', \'e\', \'y\', \'i\', \'n\', \'g\']</code>为例</p>\n<h2>修改器方法：</h2>\n<h4>1. arr.pop() &amp;&amp; arr.push()</h4>\n<p>会改变原数组</p>\n<p><code>arr.pop()</code>删除数组最后一个元素，并返回这个元素</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.pop() // <span class=\"hljs-string\">\"g\"</span>\n</code></pre>\n<p><code>arr.push()</code>在数组末尾增加一个元素，返回数组的新长度</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.push(<span class=\"hljs-string\">\'l\'</span>) // 8\narr // [<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"e\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"g\"</span>, <span class=\"hljs-string\">\"l\"</span>]\n</code></pre>\n<h4>2. arr.shift() &amp;&amp; arr.unshift()</h4>\n<p>arr.shift() 删除数组开头第一个元素，并返回这个元素</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.shift() // <span class=\"hljs-string\">\"x\"</span>\n</code></pre>\n<p>arr.unshift() 在数组开头增加一个元素，返回数组新长度。</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.unshift(<span class=\"hljs-string\">\'l\'</span>)  // 8 \narr // [<span class=\"hljs-string\">\"l\"</span>, <span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"e\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"g\"</span>]\n</code></pre>\n<h4>3. arr.reverse()</h4>\n<p>会改变原数组</p>\n<p>数组倒序，返回倒序后的数组</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.reverse() // [<span class=\"hljs-string\">\"g\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"e\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"x\"</span>]\n</code></pre>\n<h4>4. arr.sort() || arr.sort(compareFunction)</h4>\n<p>对数组进行排序，并返回当前？数组.<br/>\n<code>.sort()</code>使用的是<strong>就地排序</strong>算法，且<strong>不一定稳定</strong>。</p>\n<p>默认排序顺序是根据字符串Unicode码点。<br/>\n这意味着：</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> scores = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>]; \nscores.sort();  <span class=\"hljs-comment\">// [1, 10, 2, 21]</span>\n<span class=\"hljs-comment\">// 10在2之前,因为在 Unicode 指针顺序中\"10\"在\"2\"之前</span>\n</code></pre>\n<p>不过<code>.sort()</code>可以接受一个函数作为参数，自己指定排序规则：</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> scores = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>]; \nscores.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) </span>{ <span class=\"hljs-comment\">// 从小到大排序</span>\n  <span class=\"hljs-keyword\">return</span> a - b\n}) <span class=\"hljs-comment\">// [ 1, 2, 10, 21 ]</span>\n</code></pre>\n<p>函数compareFunction 的规则如下：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。<br/>\n备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</li>\n</ul>\n<h4>5. arr.splice(start, deleteCount, item1, item2, ...)</h4>\n<p>修改数组，从<code>start</code>开始，删除<code>deleteCount</code>个元素，再插入后面的<code>item1, item2, ...</code></p>\n<pre class=\"hljs cpp\"><code class=\"cpp\"><span class=\"hljs-comment\">// 从下标0开始，删除一个元素，并插入‘X\'</span>\narr.splice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\'X\'</span>) <span class=\"hljs-comment\">// [\"x\"]</span>\narr <span class=\"hljs-comment\">// [\"X\", \"u\", \"e\", \"y\", \"i\", \"n\", \"g\"]</span>\n</code></pre>\n<h2>访问方法：</h2>\n<h4>1. arr1.concat(arr2)</h4>\n<p>合并<code>arr1</code>和<code>arr2</code></p>\n<pre class=\"hljs bash\"><code class=\"bash\">var arr1 = [<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"e\"</span>]\nvar arr2 = [<span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"g\"</span>]\narr1.concat(arr2) // [<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"e\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"g\"</span>]\n</code></pre>\n<h4>2. arr.includes(searchElement, fromIndex)</h4>\n<p>从<code>fromIndex</code>开始查找<code>searchElement</code>，找到了返回<code>true</code>，找不到返回<code>false</code><br/>\n<code>fromIndex</code>可省略，默认从下标0开始找。</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.includes(<span class=\"hljs-string\">\'u\'</span>) // <span class=\"hljs-literal\">true</span>\narr.includes(<span class=\"hljs-string\">\'u\'</span>, 2) // <span class=\"hljs-literal\">false</span>\n</code></pre>\n<h4>3. arr.join(separator)</h4>\n<p>数组合并成一个字符串，每一个元素用<code>separator</code>隔开。<br/>\n<code>separator</code>可省略，默认为<code>,</code></p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.join() // <span class=\"hljs-string\">\"x,u,e,y,i,n,g\"</span>\narr.join(<span class=\"hljs-string\">\'\'</span>) // <span class=\"hljs-string\">\"xueying\"</span>\n</code></pre>\n<h4>4. arr.slice(begin, end)</h4>\n<p>抽取数组在[<code>begin</code>,<code>end</code>)区间内的元素，返回一个新数组。</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.slice(0, 3) // [<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"e\"</span>]\n</code></pre>\n<h4>5. arr.toString()</h4>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.toString() // <span class=\"hljs-string\">\"x,u,e,y,i,n,g\"</span>\n</code></pre>\n<h4>6. arr.indexOf(searchElement[, fromIndex = 0])</h4>\n<p>返回<code>searchElement</code>的下标，没有则返回 -1<br/>\n可以指定<code>fromIndex</code>表示从哪个下标开始查找，默认为下标0</p>\n<pre class=\"hljs cpp\"><code class=\"cpp\">arr.indexOf(<span class=\"hljs-string\">\'u\'</span>) <span class=\"hljs-comment\">// 1</span>\narr.indexOf(<span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// -1</span>\n</code></pre>\n<h4>7. arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])</h4>\n<p>找到数组中最后一个和<code>searchElement</code>相等的元素的下标。<br/>\n可以指定<code>fromIndex</code>表示从哪个下标开始查找，默认从数组最后一个元素开始。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"u\"</span>, <span class=\"hljs-string\">\"l\"</span>, <span class=\"hljs-string\">\"e\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"i\"</span>, <span class=\"hljs-string\">\"n\"</span>, <span class=\"hljs-string\">\"g\"</span>, <span class=\"hljs-string\">\"l\"</span>]\narr.lastIndexOf(<span class=\"hljs-string\">\'l\'</span>) <span class=\"hljs-comment\">// 8</span>\n</code></pre>\n<h2>迭代方法</h2>\n<h4>1. arr.forEach()</h4>\n<p>语法：</p>\n<pre class=\"hljs php\"><code class=\"php\"><span class=\"hljs-keyword\">array</span>.<span class=\"hljs-keyword\">forEach</span>(callback(currentValue, index, <span class=\"hljs-keyword\">array</span>){\n    <span class=\"hljs-comment\">//do something</span>\n}, thisArg)\n</code></pre>\n<p>对数组每一个元素执行<code>callback</code>函数。</p>\n<p><code>callback</code>函数接收3个参数：</p>\n<ol>\n<li>\n<code>currentValue</code>：当前元素的值</li>\n<li>\n<code>index</code>： 当前元素的下标</li>\n<li>\n<code>array</code>：原数组</li>\n</ol>\n<p><code>thisArg</code>：可选，用作<code>callback</code>函数的this值。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'x\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>]\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">element, index, array</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\'arr[\'</span> + index + <span class=\"hljs-string\">\'] = \'</span> + element))\n<span class=\"hljs-comment\">/* \narr[0] = x\narr[1] = u\narr[2] = e\narr[3] = y\narr[4] = i\narr[5] = n\narr[6] = g\n*/</span>\n</code></pre>\n<h4>2. arr.every(callback[, thisArg]) &amp;&amp; arr.some(callback[, thisArg])</h4>\n<p><strong>arr.every(callback[, thisArg])</strong><br/>\n测试数组的 <strong>所有</strong> 元素是否都通过了<code>callback</code>函数的测试。<br/>\n全部通过返回<code>true</code> ，否则返回<code>false</code><br/>\n<code>thisArg</code>指定<code>this</code>值。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// 格式和forEach方法没区别</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'x\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">element, index, array</span>) =></span> element === element.toLowerCase())) <span class=\"hljs-comment\">// 数组中的元素是否都为小写</span>\n<span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p><strong>arr.some(callback[, thisArg])</strong><br/>\n测试数组的 <strong>某些</strong> 元素是否<strong>全部</strong>通过了<code>callback</code>函数的测试。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// 语法和forEach方法没区别</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'X\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>] <span class=\"hljs-comment\">// 第一个元素大写</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">element, index, array</span>) =></span> element === element.toLowerCase())) <span class=\"hljs-comment\">// 数组中是否有小写的元素</span>\n<span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h4>3. arr.filter(callback[, thisArg])</h4>\n<p>过滤器，创建一个新数组, 其包含通过所提供函数实现的测试的所有元素<br/>\n语法还是跟<code>forEach</code>方法没区别。</p>\n<pre class=\"hljs bash\"><code class=\"bash\">var arr = [<span class=\"hljs-string\">\'X\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>] // 第一个元素大写\nconsole.log(arr.filter((element, index, array) => element === element.toLowerCase())) \n// [ <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span> ]\n</code></pre>\n<h4>4. arr.find(callback[, thisArg]) &amp;&amp; arr.findIndex(callback[, thisArg])</h4>\n<p><strong>arr.find(callback[, thisArg])</strong><br/>\n语法同上。<br/>\n返回数组中第一个满足<code>callback</code>函数的元素的值。否则返回 <code>undefined</code>。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'X\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>] <span class=\"hljs-comment\">// 第一个元素大写</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">element, index, array</span>) =></span> element === element.toLowerCase()))\n<span class=\"hljs-comment\">// \"u\"</span>\n</code></pre>\n<p><strong>arr.findIndex(callback[, thisArg])</strong><br/>\n语法同上。<br/>\n返回数组中第一个满足<code>callback</code>函数的元素的索引。否则返回-1。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'X\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>] <span class=\"hljs-comment\">// 第一个元素大写</span>\n<span class=\"hljs-built_in\">console</span>.log(arr.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">element, index, array</span>) =></span> element === element.toLowerCase()))\n<span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<h4>5. arr.entries()</h4>\n<p>(迭代器）返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。<br/>\n跟Python中迭代器一样，用<code>.next()</code>访问下一键值对。</p>\n<pre class=\"hljs bash\"><code class=\"bash\">var iterator = arr.entries();\niterator.next().value // {value: Array(2), <span class=\"hljs-keyword\">done</span>: <span class=\"hljs-literal\">false</span>} <span class=\"hljs-keyword\">done</span>表示迭代是否已经完成\niterator.next().value //  [1, <span class=\"hljs-string\">\"u\"</span>]\n</code></pre>\n<h4>6. arr.keys() &amp;&amp; arr.values()</h4>\n<p><strong>arr.keys()</strong><br/>\n返回一个新的Array迭代器，它包含数组中每个索引的键。</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> iterator = arr.keys();\niterator.next() <span class=\"hljs-comment\">// {value: 0, done: false}</span>\niterator.next().value <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 不断next直到最后一个</span>\n<span class=\"hljs-built_in\">console</span>.log(iterator.next())  <span class=\"hljs-comment\">// {value: undefined, done: true}</span>\n</code></pre>\n<p><strong>arr.values()</strong><br/>\n返回一个新的 Array Iterator 对象，它包含数组每个索引的值。</p>\n<blockquote>\n<p>PS: Chrome 未实现，Firefox未实现，Edge已实现。<br/>\nChrome 及Firefox可以用\"arr<a href=\"\" target=\"_blank\">Symbol.iterator</a>\"方法来代替values()方法。</p>\n</blockquote>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-keyword\">var</span> i = arr[<span class=\"hljs-built_in\">Symbol</span>.iterator]()\ni.next() <span class=\"hljs-comment\">// {value: 1, done: false}</span>\ni.next() <span class=\"hljs-comment\">// {value: 2, done: false}</span>\n</code></pre>\n<h4>7. arr.map(callback)</h4>\n<p>创建一个新数组，其结果是该数组中的每个元素都调用<code>callback</code>函数后返回的结果。<br/>\n语法：</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\">arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">currentValue, index, array</span>) </span>{ \n    <span class=\"hljs-comment\">// Return element for new_array </span>\n}[, thisArg])\n</code></pre>\n<p>例子：</p>\n<pre class=\"hljs bash\"><code class=\"bash\">arr.map((element, index, array) => element.toUpperCase()) // [<span class=\"hljs-string\">\"X\"</span>, <span class=\"hljs-string\">\"U\"</span>, <span class=\"hljs-string\">\"E\"</span>, <span class=\"hljs-string\">\"Y\"</span>, <span class=\"hljs-string\">\"I\"</span>, <span class=\"hljs-string\">\"N\"</span>, <span class=\"hljs-string\">\"G\"</span>]\n\n</code></pre>\n<h4>8. arr.reduce(callback[, initialValue])</h4>\n<p>累加器, 数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。</p>\n<p><code>callback</code>函数接收4个参数：</p>\n<ol>\n<li>\n<code>accumulator</code>：累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue</li>\n<li>\n<code>currentValue</code>：数组中正在处理的元素</li>\n<li>\n<code>currentIndex</code>：数组中正在处理的当前元素的索引。</li>\n<li>\n<code>array</code>：原数组</li>\n</ol>\n<p><code>initialValue</code>：用作第一个调用 callback的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>\n<p>回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：</p>\n<ol>\n<li>调用reduce时提供initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值。</li>\n<li>没有提供 initialValue，accumulator取数组中的第一个值，currentValue取数组中的第二个值。</li>\n</ol>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// 取最大值</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue</span>) =></span>  <span class=\"hljs-built_in\">Math</span>.max(accumulator, currentValue)))\n<span class=\"hljs-comment\">// 6</span>\n\n<span class=\"hljs-comment\">// 连接数组的元素</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">\'x\'</span>, <span class=\"hljs-string\">\'u\'</span>, <span class=\"hljs-string\">\'e\'</span>, <span class=\"hljs-string\">\'y\'</span>, <span class=\"hljs-string\">\'i\'</span>, <span class=\"hljs-string\">\'n\'</span>, <span class=\"hljs-string\">\'g\'</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, currentValue</span>) =></span>  accumulator.concat(currentValue)))\n<span class=\"hljs-comment\">// xueying</span>\n</code></pre>\n\n          ', '0', '2018-03-14 13:09:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('6', 'p5.js作品集（5）：毕达哥拉斯树', '\n      作品链接 https://codepen.io/SampleTape/full/MrKrxG/ 主要方法 translate() rotate() rect() push()...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 659px; max-height: 450px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 68.28999999999999%;\"/>\n<div class=\"image-view\" data-width=\"659\" data-height=\"450\"><img src=\"//upload-images.jianshu.io/upload_images/9469540-24ccd21d962d37b5.png\" data-original-width=\"659\" data-original-height=\"450\" data-original-format=\"image/png\" data-original-filesize=\"178116\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Pythagorian Tree.png</div>\n</div>\n<h2>作品链接</h2>\n<p><a href=\"https://link.jianshu.com?t=https://codepen.io/SampleTape/full/MrKrxG/\" target=\"_blank\" rel=\"nofollow\">https://codepen.io/SampleTape/full/MrKrxG/</a></p>\n<h2>主要方法</h2>\n<ul>\n<li>translate()</li>\n<li>rotate()</li>\n<li>rect()</li>\n<li>push()</li>\n<li>pop()</li>\n<li>map()</li>\n</ul>\n<h2>主要思想</h2>\n<ul>\n<li>递归</li>\n</ul>\n<h2>草图</h2>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 425px; max-height: 548px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 128.94%;\"/>\n<div class=\"image-view\" data-width=\"425\" data-height=\"548\"><img src=\"//upload-images.jianshu.io/upload_images/9469540-35e60a6baa754686.png\" data-original-width=\"425\" data-original-height=\"548\" data-original-format=\"image/png\" data-original-filesize=\"39476\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">草图.png</div>\n</div>\n<h2>过程分解</h2>\n<h4>一、毕达哥拉斯树的递归函数</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Pythagorian</span>(<span class=\"hljs-params\">x</span>)</span>{\n  noStroke();\n  fill(<span class=\"hljs-number\">107</span>, <span class=\"hljs-number\">142</span>, <span class=\"hljs-number\">35</span>,map(x, <span class=\"hljs-number\">0</span>, a, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">255</span>));<span class=\"hljs-comment\">//根据正方形边长设置填充色</span>\n  rect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,x,x);<span class=\"hljs-comment\">//绘制当前的正方形</span>\n  \n  <span class=\"hljs-keyword\">if</span>(x &lt;= <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//当正方形边长小于3时，结束递归</span>\n\n <span class=\"hljs-comment\">/* 绘制右上角的正方形 */</span> \n  push();\n  rotate(PI / <span class=\"hljs-number\">2</span> - t);<span class=\"hljs-comment\">//坐标轴顺时针旋转约37deg</span>\n  translate(<span class=\"hljs-number\">0</span>,-x/<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">3</span> - x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//坐标轴向上平移3边+4边的长度</span>\n  Pythagorian(x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">4</span>);<span class=\"hljs-comment\">//递归调用毕达哥拉斯函数</span>\n  pop();\n  \n <span class=\"hljs-comment\">/* 绘制左上角的正方形 */</span>\n  push();\n  rotate( - t);<span class=\"hljs-comment\">//坐标轴逆时针旋转约53deg</span>\n  translate(<span class=\"hljs-number\">0</span>,-x/<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//坐标轴向上平移3边的长度</span>\n  Pythagorian(x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">3</span>);<span class=\"hljs-comment\">//递归调用毕达哥拉斯函数</span>\n  pop(); \n  \n}\n</code></pre>\n<h4>二、声明变量、创建画布</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">//最大正方形边长</span>\n<span class=\"hljs-keyword\">var</span> t;<span class=\"hljs-comment\">//4边所对应的角度</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"/>)</span>{\n  t = <span class=\"hljs-number\">53.1301024</span> / <span class=\"hljs-number\">360</span> * <span class=\"hljs-number\">2</span> * PI;<span class=\"hljs-comment\">//约为53deg</span>\n  createCanvas(windowWidth, windowHeight);<span class=\"hljs-comment\">//创建画布</span>\n  background(<span class=\"hljs-number\">255</span>);\n  noLoop();<span class=\"hljs-comment\">//draw()函数只执行一次</span>\n}\n</code></pre>\n<h4>三、开始绘制毕达哥拉斯树</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"/>)</span>{\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight - a * <span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//将坐标系平移至画布中间底部</span>\n  Pythagorian(a);<span class=\"hljs-comment\">//调用毕达哥拉斯递归函数</span>\n}\n</code></pre>\n<h4>绘制毕达哥拉斯树完整代码</h4>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-keyword\">var</span> t;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"/>)</span>{\n  t = <span class=\"hljs-number\">53.1301024</span> / <span class=\"hljs-number\">360</span> * <span class=\"hljs-number\">2</span> * PI;\n  createCanvas(windowWidth, windowHeight);\n  background(<span class=\"hljs-number\">255</span>);\n  noLoop();\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">draw</span>(<span class=\"hljs-params\"/>)</span>{\n  translate(windowWidth/<span class=\"hljs-number\">2</span>, windowHeight - a * <span class=\"hljs-number\">2</span>);\n  Pythagorian(a);\n  \n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Pythagorian</span>(<span class=\"hljs-params\">x</span>)</span>{\n  noStroke();\n  fill(<span class=\"hljs-number\">107</span>, <span class=\"hljs-number\">142</span>, <span class=\"hljs-number\">35</span>,map(x, <span class=\"hljs-number\">0</span>, a, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">255</span>));\n  rect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,x,x);\n  \n  <span class=\"hljs-keyword\">if</span>(x &lt;= <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  \n  push();\n  rotate(PI / <span class=\"hljs-number\">2</span> - t);\n  translate(<span class=\"hljs-number\">0</span>,-x/<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">3</span> - x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">4</span>);\n  Pythagorian(x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">4</span>);\n  pop();\n  \n  push();\n  rotate( - t);\n  translate(<span class=\"hljs-number\">0</span>,-x/<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">3</span>);\n  Pythagorian(x/<span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">3</span>);\n  pop(); \n  \n}\n</code></pre>\n\n          ', '0', '2017-12-19 09:37:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('7', '使用h5新特性，轻松监听任何App自带返回键', '\n      1、前言 如今h5新特性、新标签、新规范等有很多，而且正在不断完善中，各大浏览器商对它们的支持，也是相当给力。作为前端程序员，我觉得我们还是有必要积极关注并勇敢地加以实践。接...\n    ', '\n            <h3><b>1、前言</b></h3><p>如今h5新特性、新标签、新规范等有很多，而且正在不断完善中，各大浏览器商对它们的支持，也是相当给力。作为前端程序员，我觉得我们还是有必要积极关注并勇敢地加以实践。接下来我将和各位分享一个特别好用的h5新特性（目前也不是特别新），轻松监听任何App自带的返回键，包括安卓机里的物理返回键，从而实现项目开发中进一步的需求。</p><hr/><h3>2、起因</h3><p>大概半年前接到pm一需求，用纯h5实现多audio的播放、暂停、续播，页面放至驾考宝典App中，与客户端没有任何的交互，所以与客户端相关的js不需要引用。看上去这需求挺简单的嘛，虽然之前也没做过类似的需求。不管三七二十一，撸起袖子就是干。开始了学习之旅。</p><hr/><h3>3、我这里着重介绍下我具体是怎么监听任何App自带的返回键，以及安卓机里的物理返回键。</h3><hr/><p>那为什么我要去监听呢，这里我有必要强调强调再强调。苹果手机不管是微信、QQ、App，还是浏览器里，涉及到audio、video，返回上一页系统会自动暂停当前的播放的，但不是所有安卓机都可以。所以我们自己必须自定义监听。很多朋友可能第一想法就是百度，然后出来的答案无非是这样</p><p><br/></p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 508px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 38.78%;\"/>\n<div class=\"image-view\" data-width=\"1310\" data-height=\"508\"><img src=\"//upload-images.jianshu.io/upload_images/5126207-f09f65b76419bceb.png\" data-original-width=\"1310\" data-original-height=\"508\" data-original-format=\"image/png\" data-original-filesize=\"91505\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>是不是很眼熟？然而关键需求不能完美实现，要这段代码有何用，当时我也是绞尽脑汁。直到经过大神好友指导，复制了这段代码</p><p><br/></p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 598px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 45.72%;\"/>\n<div class=\"image-view\" data-width=\"1308\" data-height=\"598\"><img src=\"//upload-images.jianshu.io/upload_images/5126207-fbd41002c3fe0621.png\" data-original-width=\"1308\" data-original-height=\"598\" data-original-format=\"image/png\" data-original-filesize=\"124619\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>所有问题迎刃而解。</p><p>这段代码的原理我个人理解就是通过判断用户浏览的是否为当前页，从而进行相关操作。</p><p>这是 MDN相关链接:<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocument%2Fhidden\" target=\"_blank\" rel=\"nofollow\">https://developer.mozilla.org/zh-CN/docs/Web/API/Document/hidden</a>。</p><p>并不是说现在真的可以通过JS监听到App里的自带返回键，甚至安卓的物理返回键，而是通过转变思路，快速实现需求。希望这个特性能帮到各位。</p>\n          ', '0', '2018-03-13 09:44:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('8', '《小白HTML5成长之路52》javascript的匿名函数无处不在', '\n      自从了解js通过canvas压缩图片上传功能以后，小白对javascript的敬畏之心又提升了一大截，这两天在练习的时候发现自己平时熟悉的代码变得陌生起来，比如为什么定义函数...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 566px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 79.16%;\"/>\n<div class=\"image-view\" data-width=\"715\" data-height=\"566\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-fb1493414bbfe723.png\" data-original-width=\"715\" data-original-height=\"566\" data-original-format=\"image/png\" data-original-filesize=\"48035\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>自从了解js通过canvas压缩图片上传功能以后，小白对javascript的敬畏之心又提升了一大截，这两天在练习的时候发现自己平时熟悉的代码变得陌生起来，比如为什么定义函数时这两个方式都可以用。</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 300px; max-height: 127px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 42.33%;\"/>\n<div class=\"image-view\" data-width=\"300\" data-height=\"127\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-7b63c64313f61546.png\" data-original-width=\"300\" data-original-height=\"127\" data-original-format=\"image/png\" data-original-filesize=\"8024\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>带着这个疑问，小白找到了老朱。“朱哥，为啥在js里面要用两种定义函数的方式呢？”</p><p>老朱：“严格意义上来说上面那个不是定义一个函数，而是将一个变量指向了一个匿名函数，这里是引用的关系。你可以控制台输出一下两个函数名看看。”</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 207px; max-height: 41px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 19.81%;\"/>\n<div class=\"image-view\" data-width=\"207\" data-height=\"41\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-c9971f8791fe239b.png\" data-original-width=\"207\" data-original-height=\"41\" data-original-format=\"image/png\" data-original-filesize=\"2755\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 308px; max-height: 98px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 31.819999999999997%;\"/>\n<div class=\"image-view\" data-width=\"308\" data-height=\"98\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-2739c6ce79cc74c2.png\" data-original-width=\"308\" data-original-height=\"98\" data-original-format=\"image/png\" data-original-filesize=\"4958\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>小白执行了一下输出以后惊讶的说道：“果然不一样啊，一个有函数名，一个没有函数名。”</p><p>老朱：“在js中匿名函数用处非常大，这几天我们写的代码里面有很多的匿名函数，你可以找找。”</p><div class=\"image-package  \">\n<div class=\"image-container\" style=\"max-width: 395px; max-height: 263px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 66.58%;\"/>\n<div class=\"image-view\" data-width=\"395\" data-height=\"263\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-a65cd0ebf961cc79.png\" data-original-width=\"395\" data-original-height=\"263\" data-original-format=\"image/png\" data-original-filesize=\"18504\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>小白：“哇，随便翻了一下昨天的代码里面就有匿名函数啊。这段点击按钮上传图片的代码中就有两个。”</p><p>老朱：“匿名函数非常有个特点，匿名函数如果没有被引用，用完后会被销毁，也就是垃圾回收释放内存。如果被引用，而引用它的那个变量一直在内存中，它指向的匿名函数就会一直存在，不会被销毁。比如上面的代码中click里面的匿名函数没有被引用，用完后会被销毁，匿名函数中的success指向的匿名函数被引用，只有success被销毁时，这个匿名函数才会被回收。垃圾回收这块说起来会比较复杂，我们有时间详细聊聊。”</p><p>老朱顿了一下接着说道：“之前我们用到的匿名函数基本都用在了参数传递和引用上，在js中匿名函数还有一个非常重要的用法就是在页面加载以后执行一个匿名函数。”</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 312px; max-height: 107px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 34.29%;\"/>\n<div class=\"image-view\" data-width=\"312\" data-height=\"107\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-80279f82a2d38394.png\" data-original-width=\"312\" data-original-height=\"107\" data-original-format=\"image/png\" data-original-filesize=\"7244\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>“这个函数在页面加载后会立即执行，如果函数有参数，可以通过最后面的小括号进行传参。如果这个页面被其他页面加载调用，这里的匿名函数被加载以后就会立即执行，由于匿名函数中我们使用了var进行变量定义，因此匿名函数中的变量不会与主页面中的变量冲突，匿名函数执行结束以后内部的变量也会被销毁，不会占用内存。”</p><p>“另外如果你的页面中引入很多其他js文件，为了避免变量冲突，也需要在页面中使用上面的匿名函数来规避风险。”</p><hr/><p><i><b>想学H5的朋友可以关注老炉，您的关注是我持续更新《小白HTML5成长之路》的动力！</b></i></p>\n          ', '0', '2018-03-13 17:35:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('9', '《小白HTML5成长之路53》入门级设计模式简单工厂模式', '\n      “小白，元旦假期过的还好吧！” “还行吧！睡了三天，冥想了三天，脑子里把最近看到javascript知识重新整理了一遍，对js的认识比以前清晰多了。” 小白继续说：“只不过，...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 566px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 79.16%;\"/>\n<div class=\"image-view\" data-width=\"715\" data-height=\"566\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-2ad922ca9055b3e2.png\" data-original-width=\"715\" data-original-height=\"566\" data-original-format=\"image/png\" data-original-filesize=\"49959\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>“小白，元旦假期过的还好吧！”</p><p>“还行吧！睡了三天，冥想了三天，脑子里把最近看到javascript知识重新整理了一遍，对js的认识比以前清晰多了。”</p><p>小白继续说：“只不过，我有个事情不太明白，一个站点或者一个游戏那么多功能，肯定会写很多代码的。他们肯定不会像我现在这样在页面里面一行一行的往下写代码吧？”</p><p>老朱：“不错，小白，能提出这个问题说明你对js做了很深刻的思考。我在很早之前做开发的时候碰到过一个问题，你可以听听。有一次我们要实现一个手机预约购物的站点，这个站点有一个用户中心，在用户中心里面包含了获取用户信息、修改用户信息、用户邀请、积分推广等等功能。你猜我是怎么实现的？”</p><p>小白：“获取用户信息是一个类、修改用户信息是一个类、用户邀请是一个类、积分推广是一个类这么实现的吧！”</p><p>老朱：“恩，没错，刚开始确实是这么做的，可是随着站点功能的增多，我发现自己写的类就越来越多，经常都忘记自己是不是写过某个类。最痛苦的是测试修改bug的时候，那叫一个乱啊。从那之后我吸取教训，做项目的时候就开始刻意的使用一些特定的设计模式来实现功能，效率一下提高了好几倍。”</p><p>小白：“设计模式？上学的时候在c++课上听说过，不过我没好好学，基本忘光了。”</p><p>老朱：“没关系，设计模式就是一些编程的技巧。我个人感觉直接去学设计模式只能做到对某个模式有印象，只有做开发的时候碰到问题再拿对应的设计模式来解决之后，才能做到真正理解。所以我们讨论的设计模式你如果理解不了，也不必非要硬套。”</p><p>老朱继续说道：“今天我们先说一个入门级的模式：简单工厂模式。比如一个购物网站不同种类的商品处理的方法不同，那么我们可能会根据商品的种类不同，创建不同的商品处理类。这些类的结构基本都一样，只不过实现的方式不一样。”</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 358px; max-height: 263px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 73.46000000000001%;\"/>\n<div class=\"image-view\" data-width=\"358\" data-height=\"263\"><img src=\"//upload-images.jianshu.io/upload_images/8746995-b64daa1ffedf8238.png\" data-original-width=\"358\" data-original-height=\"263\" data-original-format=\"image/png\" data-original-filesize=\"19123\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>“你看看上面的Itmes类，通过传入name参数，根据参数不同返回不同的实例。这样站点无论多少种商品，我们只需要实例化Items对象就可以了。”</p><p>小白说：“哦！这样确实能减轻不少工作量，传入clothes参数实例化的Items对象其实就是一个itemsClothes对象，原来js还能这么写啊。”</p><p>老朱：“恩，简单工厂模式虽然简单，却非常有用，你去练习练习吧！明天我们继续了解一些其他的设计模式。”</p><hr/><p><i><b>想学H5的朋友可以关注老炉，您的关注是我持续更新《小白HTML5成长之路》的动力！</b></i></p>\n          ', '0', '2018-03-13 17:35:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('10', '全球程序员大调查：2017年最受欢迎的编程语言是什么？', '\n      这个世界有多少种编程语言你们知道么？我想没人说得清楚，GitHub 给出了答案。GitHub 上所有的开源项目包含了 316 种编程语言。不说不知道，一说吓一跳，要知道这世界...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 640px; max-height: 355px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 55.47%;\"/>\n<div class=\"image-view\" data-width=\"640\" data-height=\"355\"><img src=\"//upload-images.jianshu.io/upload_images/10902189-d997679cc68948c1\" data-original-width=\"640\" data-original-height=\"355\" data-original-format=\"image/jpeg\" data-original-filesize=\"16313\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>这个世界有多少种编程语言你们知道么？我想没人说得清楚，GitHub</p><p> 给出了答案。GitHub 上所有的开源项目包含了 316 种编程语言。不说不知道，一说吓一跳，要知道这世界上只有 226</p><p>个国家和地区，编程语言的数量超出了世界上国家的数量，有时候就在想，那么多不为人知的编程语言都是什么人在用？</p><blockquote><p>分享之前我还是要推荐下我自己的前端学习群：437813258，不管你是小白还是大牛，小编我都挺欢迎，不定期分享干货，包括我自己整理的一份2017最新的前端资料和零基础入门教程，欢迎初学和进阶中的小伙伴。</p></blockquote><p>要问 2017年最受欢迎的编程语言是什么？同样 GitHub 也给出了答案。以下是 GitHub 根据过去提交的 PR 数量来排名的，虽然不完全准确，但是 PR 起码代表了项目的热度与欢迎度，还是值得可信的：</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 600px; max-height: 641px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 106.83%;\"/>\n<div class=\"image-view\" data-width=\"600\" data-height=\"641\"><img src=\"//upload-images.jianshu.io/upload_images/10902189-75e901c2469b035b\" data-original-width=\"600\" data-original-height=\"641\" data-original-format=\"image/jpeg\" data-original-filesize=\"19670\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>可以看到排名第一的是 JavaScript 。我想有几方面的原因吧</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 580px; max-height: 342px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 58.97%;\"/>\n<div class=\"image-view\" data-width=\"580\" data-height=\"342\"><img src=\"//upload-images.jianshu.io/upload_images/10902189-f545f4155b41cd67\" data-original-width=\"580\" data-original-height=\"342\" data-original-format=\"image/jpeg\" data-original-filesize=\"18447\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\"/>\n</div><p>一是本来 GitHub 上早期的一些开源项目都是 web 前端相关的，</p><p>二是随着移动端各种跨平台框架的需求，js 被予以重任，如 React Native、weex 等</p><p>三是</p><p> js 领域各种框架层出不穷，如 vue.js、angular.js、react.js 等，所以 JavaScript</p><p>排名第一并不是很意外。所以有对 web 前端感兴趣的同学，js 是必备技能，想往这方面发展依然热度不减，而事实上国内需求目前对有经验的 web</p><p>前端工程师确实很缺乏，很多时候钱多活少离家近都招不到人。</p><p>另外老牌语言 Java 依然能排名第二蛮意外的，我想这其中很大部分是因为 Android 的发展让 Java 焕发了第二春。</p><p>紧接着是</p><p> Python、Ruby、PHP，这三种都是属于动态语言，对于我们 Android 开发所用的 Java</p><p>静态语言是不一样的，之前有人问过我想学习一门除了 Java 之外的语言，如果实在感兴趣的话我就建议学习下 Ruby 或者 Python</p><p>，能从中了解到很多 Java 层面没接触过的知识。另外都说 PHP 是世界上最好的编程语言，这排名名不副实啊！</p><p>另外这份排名很有意思，元老级编程语言 C++、C 几乎每年都上榜，所以根本不用担心自己用的编程语言会过时，如果真那样的话 C++、C 那些程序员早都丢饭碗了。</p><p>最后在对各位刚刚入门的程序员提点建议。</p><p>一般来说前端工程师和后端工程师的比例是3:1，所以市场上需求量还是比较大的，是个不错的切入口。</p><p>前端工程师的职业目标应该是前端架构师和产品经理，由于前端跟交互打交道特别多，所以对产品的理解会比较深，但CTO一般来说都是由服务端工程师出生，因为服务端技术、架构可以说更为复杂。</p>\n          ', '0', '2018-03-13 19:48:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('11', 'vue.js配合axios发送Ajax请求', '\n      vue.js与ajax vue本身是不支持发送ajax请求，需要通过其他库来实现的（比如vue1.0版本官方推荐的vue-resource、vue2.0版本官方推荐的axio...\n    ', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 400px; max-height: 400px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 100.0%;\"/>\n<div class=\"image-view\" data-width=\"400\" data-height=\"400\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-928fe259a32733f4.jpg\" data-original-width=\"400\" data-original-height=\"400\" data-original-format=\"image/jpeg\" data-original-filesize=\"8729\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">vue</div>\n</div>\n<h4>vue.js与ajax</h4>\n<blockquote>\n<p>vue本身是不支持发送ajax请求，需要通过其他库来实现的（比如vue1.0版本官方推荐的vue-resource、vue2.0版本官方推荐的axios），或者也可以使用jquery来发送ajax请求</p>\n</blockquote>\n<p>本文仅做一个自己的参考...使用axios发送ajax请求</p>\n<blockquote>\n<p>vue2.0版本已经不推荐vue-resurce了，官方推荐axios来发送，首先要先了解的是axios是一个基于Promise的HTTP请求客户端，用来发送请求。</p>\n</blockquote>\n<h6>关于Promise的知识，这里不再详细讲解啦。推荐可以去看下阮一峰老师的书《ECMAScript 6 入门》去进行了解。</h6>\n<h4>步骤</h4>\n<h6>1.安装axios，我们先去github，搜索axios</h6>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 610px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 87.27000000000001%;\"/>\n<div class=\"image-view\" data-width=\"1029\" data-height=\"898\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-9882cf2228038546.png\" data-original-width=\"1029\" data-original-height=\"898\" data-original-format=\"image/png\" data-original-filesize=\"119115\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<p>官方文档下有非常详细的API,这里我们就通过直接引入的方式来使用。</p>\n<h3>通过get方法请求</h3>\n<p>get.html</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/vue.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/axios.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>发送get请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n        <span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">new</span> Vue({\n                <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">\'#app\'</span>,\n                <span class=\"hljs-attr\">data</span>:{\n                    <span class=\"hljs-attr\">users</span>:{\n                        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'\'</span>,\n                        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-string\">\'\'</span>\n                    }\n                },\n                <span class=\"hljs-attr\">methods</span>:{\n                    <span class=\"hljs-comment\">//axios.get的发送参数有两种，两个ajax请求函数都可实现</span>\n                    sendGetByStr(){\n                        <span class=\"hljs-comment\">//1.get通过直接发字符串拼接</span>\n                        axios.get(<span class=\"hljs-string\">`get.php?name=<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.users.name}</span>&amp;age=<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.users.name}</span>`</span>)\n                          .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(response.data);\n                          })\n                          .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(error);\n                        });\n\n                    },\n                    sendGetByObj(){\n                        <span class=\"hljs-comment\">//2.get通过params选项</span>\n                        axios.get(<span class=\"hljs-string\">`get.php?`</span>,{\n                            <span class=\"hljs-attr\">params</span>:{\n                                <span class=\"hljs-attr\">name</span>:<span class=\"hljs-keyword\">this</span>.users.name,\n                                <span class=\"hljs-attr\">age</span>:<span class=\"hljs-keyword\">this</span>.users.age\n                            }\n                        })\n                          .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(response.data);\n                          })\n                          .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(error);\n                        });\n\n                    }\n                }\n            });\n        }\n\n        \n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"姓名\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:age</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"年龄\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"sendGetByStr\"</span>></span>发送get请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n\n\n\n</code></pre>\n<p>界面效果如图，我就偷懒不写样式了...</p>\n<br/>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 466px; max-height: 139px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 29.830000000000002%;\"/>\n<div class=\"image-view\" data-width=\"466\" data-height=\"139\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-14d43b06a6cb21ae.png\" data-original-width=\"466\" data-original-height=\"139\" data-original-format=\"image/png\" data-original-filesize=\"12091\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<p>写个最简单的php响应后输出 get.php</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php</span>\n   $name=$_GET[<span class=\"hljs-string\">\"name\"</span>];\n   $age=$_GET[<span class=\"hljs-string\">\"age\"</span>];\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"姓名：\"</span>.$name.<span class=\"hljs-string\">\",\"</span>.<span class=\"hljs-string\">\"年龄：\"</span>.$age；\n<span class=\"hljs-meta\">?></span></span>\n</code></pre>\n<h6>输入名字和年龄，就直接请求并输入数据了</h6>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 164px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 21.22%;\"/>\n<div class=\"image-view\" data-width=\"773\" data-height=\"164\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-e116a4252171c829.png\" data-original-width=\"773\" data-original-height=\"164\" data-original-format=\"image/png\" data-original-filesize=\"23063\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 378px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 36.38%;\"/>\n<div class=\"image-view\" data-width=\"1039\" data-height=\"378\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-885b1703987f2104.png\" data-original-width=\"1039\" data-original-height=\"378\" data-original-format=\"image/png\" data-original-filesize=\"50294\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<h3>通过post请求</h3>\n<p>同样post.html</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/vue.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/axios.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>发送post请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n        <span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">new</span> Vue({\n                <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">\'#app\'</span>,\n                <span class=\"hljs-attr\">data</span>:{\n                    <span class=\"hljs-attr\">users</span>:{\n                        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'\'</span>,\n                        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-string\">\'\'</span>\n                    }\n                },\n                <span class=\"hljs-attr\">methods</span>:{\n                    sendPsot(){\n                        axios.post(<span class=\"hljs-string\">\'post.php\'</span>, {\n                            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-keyword\">this</span>.users.name,\n                            <span class=\"hljs-attr\">age</span>: <span class=\"hljs-keyword\">this</span>.users.age,\n                          })\n                          .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(response);\n                          })\n                          .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(error);\n                          });\n                    }\n                    \n                }\n            });\n        }\n\n        \n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"姓名\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:age</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"年龄\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"sendPsot\"</span>></span>发送get请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n\n</code></pre>\n<p>同样post.php</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?php</span>\n   $name=$_POST[<span class=\"hljs-string\">\"name\"</span>];\n   $age=$_POST[<span class=\"hljs-string\">\"age\"</span>];\n\n   <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"姓名：\"</span>.$name.<span class=\"hljs-string\">\",\"</span>.<span class=\"hljs-string\">\"年龄：\"</span>.$age\n<span class=\"hljs-meta\">?></span></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 453px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 42.66%;\"/>\n<div class=\"image-view\" data-width=\"1062\" data-height=\"453\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-f388328af1143a3d.png\" data-original-width=\"1062\" data-original-height=\"453\" data-original-format=\"image/png\" data-original-filesize=\"81171\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 476px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 51.849999999999994%;\"/>\n<div class=\"image-view\" data-width=\"918\" data-height=\"476\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-ff9b0def6c18cd70.png\" data-original-width=\"918\" data-original-height=\"476\" data-original-format=\"image/png\" data-original-filesize=\"60038\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<blockquote>\n<p>但是确实很怪异的行为就是，我明明按照官网的api写的，居然没有获取到name和age，通过查找资料得知，这种方式传递的数据是Request Payload。所以需要做些小处理，当然啦，个人观点，这也是官方文档还没更新解决的一些小问题吧</p>\n</blockquote>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 458px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 65.49000000000001%;\"/>\n<div class=\"image-view\" data-width=\"1220\" data-height=\"799\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-682ecf83669c2861.png\" data-original-width=\"1220\" data-original-height=\"799\" data-original-format=\"image/png\" data-original-filesize=\"114001\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<p>还好，官方文档提供了一个参数可以对传递参数进行转换，具体如下<br/>\npost.html改</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/vue.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/axios.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>发送post请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n        <span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">new</span> Vue({\n                <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">\'#app\'</span>,\n                <span class=\"hljs-attr\">data</span>:{\n                    <span class=\"hljs-attr\">users</span>:{\n                        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\'\'</span>,\n                        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-string\">\'\'</span>\n                    }\n                },\n                <span class=\"hljs-attr\">methods</span>:{\n                    sendPsot(){\n                        axios.post(<span class=\"hljs-string\">\'post.php\'</span>,<span class=\"hljs-keyword\">this</span>.users,{\n                                <span class=\"hljs-comment\">//transformRequest就是用来处理转换的</span>\n                               transformRequest:[\n                                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>)=></span>{\n                                        <span class=\"hljs-keyword\">let</span> transObj=<span class=\"hljs-string\">\'\'</span>;\n                                        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> data){\n                                            transObj+=i+<span class=\"hljs-string\">\'=\'</span>+data[i]+<span class=\"hljs-string\">\'&amp;\'</span>;\n                                        }\n                                        <span class=\"hljs-keyword\">return</span> transObj;\n                                    }\n                                ]\n                          })\n                          .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">response</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(response.data);\n                          })\n                          .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) </span>{\n                            <span class=\"hljs-built_in\">console</span>.log(error);\n                          });\n                    }\n                    \n                }\n            });\n        }\n\n        \n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:name</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.name\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"姓名\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">:age</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"users.age\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"年龄\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"sendPsot\"</span>></span>发送get请求<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>></span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n\n\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 230px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 26.650000000000002%;\"/>\n<div class=\"image-view\" data-width=\"863\" data-height=\"230\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-45f45f5b3438ac8a.png\" data-original-width=\"863\" data-original-height=\"230\" data-original-format=\"image/png\" data-original-filesize=\"26604\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 370px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 52.92%;\"/>\n<div class=\"image-view\" data-width=\"1387\" data-height=\"734\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-c45ab394f1b2dda5.png\" data-original-width=\"1387\" data-original-height=\"734\" data-original-format=\"image/png\" data-original-filesize=\"100381\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<p>上面都是在没有跨域的情况下进行ajax请求的，如果我们要跨域请求呢？<br/>\n跨域请求的话axios还没有解决方案，当时，可以通过vue-resource的jonsp来实现，vue-resource虽然在vue2.0版本官方不推荐，但是也是可以用的，具体看项目需求了</p>\n<p>使用vue-resource跨域请求的一个例子</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/vue.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/vue-resource.min.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>输入用户名获取github上的账户信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n        <span class=\"hljs-built_in\">window</span>.onload=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n            <span class=\"hljs-keyword\">new</span> Vue({\n                <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">\'#app\'</span>,\n                <span class=\"hljs-attr\">data</span>:{\n                    <span class=\"hljs-attr\">id</span>:<span class=\"hljs-string\">\'\'</span>,\n                    <span class=\"hljs-attr\">userData</span>:<span class=\"hljs-string\">\'\'</span>\n                },\n                <span class=\"hljs-attr\">methods</span>:{\n                    getData(){\n                        <span class=\"hljs-keyword\">this</span>.$http.jsonp(<span class=\"hljs-string\">`https://api.github.com/users/<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.id}</span>`</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resp</span>)</span>{\n                            <span class=\"hljs-keyword\">this</span>.userData=resp.data.data;\n                        });\n                    }\n                    \n                }\n            });\n        }\n\n        \n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"app\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"id\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"姓名\"</span>></span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"getData\"</span>></span>获取github的账户信息<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>></span>\n    \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(v,k) in userData\"</span>></span>{{k}}:{{v}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 183px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 21.23%;\"/>\n<div class=\"image-view\" data-width=\"862\" data-height=\"183\"><img src=\"//upload-images.jianshu.io/upload_images/4858603-4232800d51c7c0a2.png\" data-original-width=\"862\" data-original-height=\"183\" data-original-format=\"image/png\" data-original-filesize=\"20415\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<p>典型的跨域请求例子输入姓名即可查询在github上面的信息。<br/>\n有需要的可以去<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fzhengyepan.com%2F%3Fp%3D360%26preview%3Dtrue\" target=\"_blank\" rel=\"nofollow\">下载源码</a><br/>\n欢迎访问我的个人网站<a href=\"https://link.jianshu.com/?t=http%3A%2F%2Fwww.zhengyepan.com\" target=\"_blank\">zhengyepan.com</a><br/>\n欢迎讨论交流~</p>\n\n          ', '0', '2018-03-13 22:42:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('12', '程序员用javascript实力打造流星雨特效', '\n      知识点：canvas高级绘图标签API运用，数组方法，js逻辑思维，代码性能优化等。', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 538px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 57.42%;\"/>\n<div class=\"image-view\" data-width=\"937\" data-height=\"538\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-dc69816d9029e6e5\" data-original-width=\"937\" data-original-height=\"538\" data-original-format=\"image/gif\" data-original-filesize=\"596522\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">web前端学习群，189394454，有视频、源码、学习方法等大量干货分享</div>\n</div><br/>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 640px; max-height: 512px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 80.0%;\"/>\n<div class=\"image-view\" data-width=\"640\" data-height=\"512\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-597b41420286e371\" data-original-width=\"640\" data-original-height=\"512\" data-original-format=\"image/jpeg\" data-original-filesize=\"46594\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">关注公众号→‘学习web前端’开启你的web前端学习之路</div>\n</div><br/>\n<p>知识点：canvas高级绘图标签API运用，数组方法，js逻辑思维，代码性能优化等。<br/>\n', '0', '2018-03-08 14:50:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('13', 'Webpack入门教程', '\n      转自Kindem的博客 什么是Webpack Webpack是一个模块打包器，它的主要目标是将JavaScript文件打包在一起，打包后的文件用于在浏览器中使用。 ----W...\n    ', '\n            <blockquote>\n<p>转自<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.kindemh.cn\" target=\"_blank\" rel=\"nofollow\">Kindem的博客</a></p>\n</blockquote>\n<h1>什么是Webpack</h1>\n<blockquote>\n<p>Webpack是一个模块打包器，它的主要目标是将JavaScript文件打包在一起，打包后的文件用于在浏览器中使用。 ----Webpack中文文档</p>\n</blockquote>\n<p>说白了，它最大的用处就是分析一个网页的各种依赖，并且自动化地将这些依赖打包在一起并且压缩，供网页使用。当然它的功能不止如此，比如依赖loader，它还可以将JavaScript ES6(很多老浏览器不一定支持)转换成支持更加多浏览器的老版本JavaScript。</p>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 649px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 40.11%;\"/>\n<div class=\"image-view\" data-width=\"1618\" data-height=\"649\"><img src=\"//upload-images.jianshu.io/upload_images/6840624-27c78d75f2cd8a40..jpg\" data-original-width=\"1618\" data-original-height=\"649\" data-original-format=\"image/jpeg\" data-original-filesize=\"39111\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Webpack示意图</div>\n</div>\n<p>总之，它在前端的模块化开发中占有重要的作用，如果想让自己的项目变得更加整洁，开发更加有效率，Webpack有必要一学。</p>\n<h1>在开始之前</h1>\n<p>在介绍Webpack之前，很有必要先介绍一下Node.js和npm，如果你已经对着两者有着深刻的了解，可以直接跳过，看下一节，如果你之前从未听说过Node.js，可以仔细看看这一节对这两者的介绍，Webpack的使用一定程度上依赖着这两者。</p>\n<blockquote>\n<p>Node.js是一个基于Chrome V8引擎驱动的JavaScript运行时。Node.js使用高效、轻量级的事件驱动、非阻塞I/O模型。它的包生态系统，npm，是目前世界上最大的开源库生态系统。 ----Node.js官网</p>\n</blockquote>\n<p>看了是不是感觉Node.js官网的介绍，感觉这玩意十分高深莫测，说实话我第一次看到的时候也没有太看懂。接下来用人话给大家翻译一下，众所周知，JavaScript是Web开发中不可或缺的语言，它可以为网页添加许多动态效果，也能为网页添加更多可能性，如果连JavaScript都不知道，请先学习一下Web开发御三家(html, css, js)，但是JavaScript的硬伤是只能在浏览器上运行，脱离浏览器，就无法运行。而Node.js就解决了这么一个问题，它将Chrome V8的JavaScript引擎提取出来，使得JavaScript能够脱离浏览器而运行，这样就为JavaScript提供了无限的可能性。至于它的更多，现在先不用了解那么深，对于Node.js，你现在只需要了解到这里就行了。</p>\n<p>而npm，则是Node.js自带的包管理系统，npm的作用跟python的pip很像，你只需要敲一行命令，就能获取到世界上任何一个角落的人发布在其上的源码并且使用。显然，JavaScript开发模块化，npm也在其中做出了很大贡献。</p>\n<p>接下来，先安装Node.js吧，打开Node.js的官网<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fnodejs.org%2Fen%2F\" target=\"_blank\" rel=\"nofollow\">Node.js</a><br/>\n</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 493px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 70.54%;\"/>\n<div class=\"image-view\" data-width=\"1188\" data-height=\"838\"><img src=\"//upload-images.jianshu.io/upload_images/6840624-9ea36c2812bfdd1c..jpg\" data-original-width=\"1188\" data-original-height=\"838\" data-original-format=\"image/jpeg\" data-original-filesize=\"76879\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Node.js官网</div>\n</div><p/>\n<p>简单粗暴的页面，你可以选择稳定版LTS和最新版Current下载，自行安装即可。当安装完成后，你可以在命令行输入</p>\n<pre class=\"hljs undefined\"><code>node -v\n</code></pre>\n<p>如果正确显示了Node.js的版本号，就说明你的Node.js成功安装了，当然，npm是Node.js的一部分，Node.js安装成功的同时，npm也就可以使用了。</p>\n<h1>开始学习Webpack</h1>\n<p>如果你还没有安装Node.js，请移步上一节并认真安装好Node.js，如果你已经安装了Node.js，就可以开始学习Webpack了。</p>\n<p>首先，先建立一个文件夹，用来作为学习Webpack的项目文件夹，文件夹名随意，接着在项目使用命令行中初始化npm</p>\n<pre class=\"hljs undefined\"><code>npm init\n</code></pre>\n<p>运行该命令会询问你你这一个项目的基本信息，比如项目名、作者、描述、Git仓库等等，这是因为init指令实际上是将项目文件夹变成一个npm包，你甚至在日后可以将这个npm包发布给他人使用，当然，我们现在只是学习，一路回车就行，如果你实在比较较真，也没关系，这些东西日后可以在配置文件中修改。如果你不想敲回车，也可以直接使用</p>\n<pre class=\"hljs undefined\"><code>npm init -y\n</code></pre>\n<p>当npm初始化完成之后，项目下会自动生成一个package.json文件，上面详细说明了你这一个npm包中的信息，我们暂时可以不用关注这些内容。接下来在项目中安装Webpack。</p>\n<pre class=\"hljs undefined\"><code>npm install --save-dev webpack\nnpm install --save-dev webpack-cli\n</code></pre>\n<p>这两行命令会为你的项目安装webpack和webpack-cli包，前者是webpack的核心库，后者是分离出来的webpack命令行功能，我们需要使用webpack-cli来进行项目的打包等操作。</p>\n<h1>不使用Webpack时，项目的问题</h1>\n<p>我们先看一下不使用webpack进行构建时，项目的缺陷。</p>\n<p>先在项目文件夹中创建几个目录和文件，项目结构如下图所示，前面带加号的是需要你自己创建的文件和目录：</p>\n<pre class=\"hljs ruby\"><code class=\"ruby\">  webpack-learning\n  <span class=\"hljs-params\">|- package.json\n+ |</span>- index.html\n+ <span class=\"hljs-params\">|- /src\n+    |</span>- index.js\n</code></pre>\n<p>src/index.js</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">component</span>(<span class=\"hljs-params\"/>) </span>{\n    <span class=\"hljs-keyword\">var</span> element = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\'div\'</span>);\n\n    <span class=\"hljs-comment\">// Lodash（目前通过一个 script 脚本引入）对于执行这一行是必需的</span>\n    element.innerHTML = _.join([<span class=\"hljs-string\">\'Hello\'</span>, <span class=\"hljs-string\">\'webpack\'</span>], <span class=\"hljs-string\">\' \'</span>);\n\n    <span class=\"hljs-keyword\">return</span> element;\n}\n\n<span class=\"hljs-built_in\">document</span>.body.appendChild(component());\n</code></pre>\n<p>index.html</p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-meta\">&lt;!doctype html></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>Getting Started<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/lodash@4.16.6\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./src/index.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>这里的Lodash是一个JavaScript库，这里引用的意味就是给大家展示一下我们平时使用第三方JavaScript库的做法，这样的做法会产生很多问题，因为通过index.html的联系，很明显，index.js对第三方库lodash产生了隐形依赖，之所以说是隐形依赖，是因为在lodash被引用之前，index.js中的双下划线变量(lodash提供的一个变量)还是未知的，只有在lodash被引用之后，这个变量才能发挥作用，显而易见，这样做的很危险的，这样会产生很多问题：</p>\n<ul>\n<li>无法立即体现，脚本的执行依赖于外部扩展库(external library)。</li>\n<li>如果依赖不存在，或者引入顺序错误，应用程序将无法正常运行。</li>\n<li>如果依赖被引入但是并没有使用，浏览器将被迫下载无用代码。</li>\n</ul>\n<p>Webpack的价值就这样体现出来了，当你的项目中引用的JavaScript文件，html页面越来越多，就会出现一些不可避免的依赖问题，而我们通过Webpack可以解决这一问题，对于一个html页面，我们可以该页面依赖的所有JavaScript文件打包在一起，构成一个JavaScript文件，这样，html页面只需要引用这一个JavaScript文件即可，上面说的问题，就可以完全被避免。当然自己打包也是可以的，不过通过Webpack这一神器，就没那么麻烦了，你只要告诉它，你需要把哪些文件打包，输出到哪里，它就可以自动分析所有JavaScript的依赖关系，然后帮你打包成一个文件。</p>\n<p>接下来，我们就来打包一次试试。</p>\n<h1>使用Webpack打包</h1>\n<p>在打包之前，我们还需要做一点小小的调整----将开发环境和生产环境分开：</p>\n<pre class=\"hljs java\"><code class=\"java\">  webpack-learning\n  |- <span class=\"hljs-keyword\">package</span>.json\n+ |- /dist\n+    |- index.html\n- |- index.html\n  |- /src\n     |- index.js\n</code></pre>\n<p>这样一来，src文件夹里面，放的就是我们开发的环境，所有的代码编写都在这里进行，而相对稳定的html文件就直接放入dist文件夹中，作为生产环境的文件，这样有一个好处，每一次更新src之后，只需要把src中的东西重新打包，然后供生产环境中的html文件使用，就行了，而html文件本身，几乎不用被更改。</p>\n<p>因为我们用到了lodash包，所以需要在npm中安装lodash依赖：</p>\n<pre class=\"hljs undefined\"><code>npm install --save lodash\n</code></pre>\n<p>细心的朋友可能注意到，这里使用的是--save而不是--save-dev，两者的区别是，--save是生产环境的依赖，也就是供给用户使用的依赖，而--save-dev是开发环境的依赖，比如Webpack，在代码完成并且打包之后，就不需要再使用到它了，显然用户是无需接触到Webpack的，所以这里Webpack属于开发环境的依赖。</p>\n<p>添加lodash依赖之后，我们就可以在js文件中导入并且使用了：</p>\n<p>src/index.js</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\">+ <span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\'lodash\'</span>;\n+\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">component</span>(<span class=\"hljs-params\"/>) </span>{\n    <span class=\"hljs-keyword\">var</span> element = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\'div\'</span>);\n\n-   <span class=\"hljs-comment\">// Lodash, currently included via a script, is required for this line to work</span>\n+   <span class=\"hljs-comment\">// Lodash, now imported by this script</span>\n    element.innerHTML = _.join([<span class=\"hljs-string\">\'Hello\'</span>, <span class=\"hljs-string\">\'webpack\'</span>], <span class=\"hljs-string\">\' \'</span>);\n\n    <span class=\"hljs-keyword\">return</span> element;\n  }\n\n  <span class=\"hljs-built_in\">document</span>.body.appendChild(component());\n</code></pre>\n<p>因为接下来我们要使用Webpack打包所有的js，这样的话，我们就不需要再自己在html引入JavaScript库了，而只需要引入打包之后的文件就行了，我们先约定以后打包的文件名叫做bundle.js，那么接下来，修改html文件：</p>\n<p>dist/index.html</p>\n<pre class=\"hljs xml\"><code class=\"xml\">  <span class=\"hljs-meta\">&lt;!doctype html></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>></span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>></span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>></span>Getting Started<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>></span>\n-    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://unpkg.com/lodash@4.16.6\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>></span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n-    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"./src/index.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n+    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"bundle.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span>\n   <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>\n<p>这样的话，我们就可以开始打包了。</p>\n<p>在命令行输入</p>\n<pre class=\"hljs undefined\"><code>webpack-cli src/index.js --output dist/bundle.js\n</code></pre>\n<p>如果不行的话，尝试</p>\n<pre class=\"hljs cpp\"><code class=\"cpp\"><span class=\"hljs-comment\">// linux</span>\nnode_modules/.bin/webpack-cli src/index.js --output dist/bundle.js\n<span class=\"hljs-comment\">// windows</span>\nnode_modules\\.bin\\webpack-cli src/index.js --output dist/bundle.js\n</code></pre>\n<p>这一行的意思是执行Webpack命令行程序，将src/index.js作为入口文件，自动分析index.js的依赖，并且将所有依赖和index.js本身一起打包成一个文件，输出到dist/bundle.js，执行这一行，可以看到Webpack打包成功的输出信息：</p>\n<pre class=\"hljs ruby\"><code class=\"ruby\"><span class=\"hljs-symbol\">Hash:</span> <span class=\"hljs-number\">61</span>bf2519e9ef5fa0eb5e\n<span class=\"hljs-symbol\">Version:</span> webpack <span class=\"hljs-number\">4.1</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-symbol\">Time:</span> <span class=\"hljs-number\">4080</span>ms\nBuilt <span class=\"hljs-symbol\">at:</span> <span class=\"hljs-number\">2018</span>-<span class=\"hljs-number\">3</span>-<span class=\"hljs-number\">7</span> <span class=\"hljs-number\">16</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">58</span><span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">36</span>\n    Asset      Size  Chunks             Chunk Names\nbundle.js  <span class=\"hljs-number\">69.6</span> KiB       <span class=\"hljs-number\">0</span>  [emitted]  main\nEntrypoint main = bundle.js\n   [<span class=\"hljs-number\">1</span>] (webpack)/buildin/<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-title\">js</span> 519 <span class=\"hljs-title\">bytes</span> {0} [<span class=\"hljs-title\">built</span>]</span>\n   [<span class=\"hljs-number\">2</span>] (webpack)/buildin/global.js <span class=\"hljs-number\">509</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">3</span>] ./src/index.js <span class=\"hljs-number\">231</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n    + <span class=\"hljs-number\">1</span> hidden <span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span></span>\n</code></pre>\n<p>打包成功并且输出之后，你就可以打开html文件看看结果了：</p>\n<br/>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 458px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 57.9%;\"/>\n<div class=\"image-view\" data-width=\"791\" data-height=\"458\"><img src=\"//upload-images.jianshu.io/upload_images/6840624-ef3b3fc16169ed6f..jpg\" data-original-width=\"791\" data-original-height=\"458\" data-original-format=\"image/jpeg\" data-original-filesize=\"14361\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">html运行结果</div>\n</div>\n<p>可见打包之后的JavaScript能够成功运行，并且解决了之前说的几个问题，这就是Webpack的主要功能。</p>\n<p>但是你可能会问，每次都要自己输入巴拉巴拉一大串命令，那也太麻烦了吧，Webpack显然想到了这一点，它是支持配置文件的，你只需要在项目根目录下新建一个配置文件webpack.config.js，并且按照<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fdoc.webpack-china.org%2Fconcepts%2F\" target=\"_blank\" rel=\"nofollow\">Webpack中文文档</a>给出的语法进行编写就行了。下面给出一个配置文件的例子：</p>\n<p>webpack.config.js</p>\n<pre class=\"hljs java\"><code class=\"java\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">\'path\'</span>);\n\n<span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n    entry: <span class=\"hljs-string\">\'./src/index.js\'</span>,\n    output: {\n      filename: <span class=\"hljs-string\">\'bundle.js\'</span>,\n      path: path.resolve(__dirname, <span class=\"hljs-string\">\'dist\'</span>)\n    }\n};\n</code></pre>\n<p>完成配置文件之后，你需要打包时，就不需要再自己输入入口和输出了，直接这样就行了</p>\n<pre class=\"hljs cpp\"><code class=\"cpp\">webpack-cli\n<span class=\"hljs-comment\">// 如果不行尝试</span>\n<span class=\"hljs-comment\">// linux</span>\nnode_modules/.bin/webpack-cli\n<span class=\"hljs-comment\">// windows</span>\nnode_modules\\.bin\\webpack-cli\n</code></pre>\n<h1>NPM脚本</h1>\n<p>有了配置文件你可以还不满足，我既然有npm，为什么不能直接让npm帮我运行呢，答案是可以的，npm支持用户自定义脚本，用户可以在npm的配置文件中添加自己的脚本内容，然后使用下面给出的指令来运行用户的脚本</p>\n<pre class=\"hljs undefined\"><code>npm run 脚本名\n</code></pre>\n<p>这样的话，我们不是可以自己定义一个build脚本，让它完成Webpack打包的任务呢。</p>\n<p>package.json</p>\n<pre class=\"hljs bash\"><code class=\"bash\">{\n  ...\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"webpack-cli\"</span>\n  },\n  ...\n}\n</code></pre>\n<p>这样一来，只要</p>\n<pre class=\"hljs undefined\"><code>npm run build\n</code></pre>\n<p>世界我有，打包全自动!</p>\n<h1>关于Webpack的更多</h1>\n<p>Webpack的功能当然还不止这些，这里只介绍Webpack的基本功能打包，当你阅读完这篇文章，对Webpack是什么，怎么用也知道个ABCD了，如果想了解更多，可以关注我，我会给大家继续更新一下Web前端的知识，当然也可以直接上<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fdoc.webpack-china.org%2Fconcepts%2F\" target=\"_blank\" rel=\"nofollow\">Webpack中文文档</a>上查更多的东西，把自己的项目变得更加自动化，让开发更加有效率。</p>\n\n          ', '0', '2018-03-07 19:04:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('14', 'Canvas制作旋转的太极', '\n      前言   好久没动canvas了，今下午突然想回顾一下，就写了个旋转的太极，哈哈，蛮好玩的，在这里就将自己写的过程展示出来，旋转使用的css实现的，没有用canvas自己的，...\n    ', '\n            <blockquote>\n<p>前言</p>\n</blockquote>\n<p>  好久没动canvas了，今下午突然想回顾一下，就写了个旋转的太极，哈哈，蛮好玩的，在这里就将自己写的过程展示出来，旋转使用的css实现的，没有用canvas自己的，希望大佬们不要吐槽。</p>\n<p><code>css</code></p>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-tag\">body</span>{\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ddd</span>;\n}\n<span class=\"hljs-selector-id\">#canvas</span>{\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">40%</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">30%</span>;\n    <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%,-50%);\n    <span class=\"hljs-attribute\">-moz-transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%,-50%);\n    <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%,-50%);\n    <span class=\"hljs-attribute\">-o-transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%,-50%);\n    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%,-50%);\n    <span class=\"hljs-attribute\">-webkit-animation</span>: testAnimate <span class=\"hljs-number\">3s</span> linear infinite;\n    <span class=\"hljs-attribute\">-o-animation</span>: testAnimate <span class=\"hljs-number\">3s</span> linear infinite;\n    <span class=\"hljs-attribute\">animation</span>: testAnimate <span class=\"hljs-number\">3s</span> linear infinite;\n}\n@<span class=\"hljs-keyword\">keyframes</span> testAnimate {\n    <span class=\"hljs-selector-tag\">from</span> {\n        <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">rotate</span>(0);\n        <span class=\"hljs-attribute\">-moz-transform</span>: <span class=\"hljs-built_in\">rotate</span>(0);\n        <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">rotate</span>(0);\n        <span class=\"hljs-attribute\">-o-transform</span>: <span class=\"hljs-built_in\">rotate</span>(0);\n        <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(0);\n    }\n    <span class=\"hljs-selector-tag\">to</span> {\n        <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">rotate</span>(360deg);\n        <span class=\"hljs-attribute\">-moz-transform</span>: <span class=\"hljs-built_in\">rotate</span>(360deg);\n        <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">rotate</span>(360deg);\n        <span class=\"hljs-attribute\">-o-transform</span>: <span class=\"hljs-built_in\">rotate</span>(360deg);\n        <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(360deg);\n    }\n}\n</code></pre>\n<p><code>html</code></p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"500\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"500\"</span>></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>></span>\n</code></pre>\n<p><code>js</code></p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> ctx = <span class=\"hljs-built_in\">document</span>\n    .getElementById(<span class=\"hljs-string\">\"canvas\"</span>)\n    .getContext(<span class=\"hljs-string\">\"2d\"</span>);\n<span class=\"hljs-comment\">// left-black-big</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#000\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-built_in\">Math</span>.PI/<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">1.5</span>,<span class=\"hljs-literal\">false</span>);\nctx.closePath();\nctx.fill();\n<span class=\"hljs-comment\">// right-white-big</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#fff\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-built_in\">Math</span>.PI/<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">1.5</span>,<span class=\"hljs-literal\">true</span>);\nctx.closePath();\nctx.fill();\n<span class=\"hljs-comment\">// top-black-middle</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#000\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-built_in\">Math</span>.PI/<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">1.5</span>,<span class=\"hljs-literal\">true</span>);\nctx.closePath();\nctx.fill();\n<span class=\"hljs-comment\">// bottom-white-middle</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#fff\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">350</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-built_in\">Math</span>.PI/<span class=\"hljs-number\">2</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">1.5</span>,<span class=\"hljs-literal\">false</span>);\nctx.closePath();\nctx.fill();\n<span class=\"hljs-comment\">// top-white-small</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#fff\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">150</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">2</span>);\nctx.closePath();\nctx.fill();\n<span class=\"hljs-comment\">// bottom-black-small</span>\nctx.beginPath();\nctx.fillStyle = <span class=\"hljs-string\">\"#000\"</span>;\nctx.arc(<span class=\"hljs-number\">250</span>,<span class=\"hljs-number\">350</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">Math</span>.PI*<span class=\"hljs-number\">2</span>);\nctx.closePath();\nctx.fill();\n</code></pre>\n<p><code>效果</code><br/>\n</p><div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 397px; max-height: 390px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 98.24000000000001%;\"/>\n<div class=\"image-view\" data-width=\"397\" data-height=\"390\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-0cd5ecae042c8885.gif\" data-original-width=\"397\" data-original-height=\"390\" data-original-format=\"image/gif\" data-original-filesize=\"790546\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">效果图</div>\n</div><p/>\n<blockquote>\n<p>后序</p>\n</blockquote>\n<p>如果大家希望后续可以出一些canvas教程的话，可以评论区告诉我，我会找时间写的。谢谢大家~</p>\n\n          ', '0', '2018-03-09 08:01:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('15', '有趣的 setTimeout', '\n        看到这三行代码，也许你会不耐烦道：又要讲闭包？要吐了好么？别急，让我们先来思考一下，这段代码在浏览器中的执行结果是什么？   甲：顺序打印0到9？  乙：这题我见过，打印...\n    ', '\n            <pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">10</span>;j++){\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"/>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(j)\n    },<span class=\"hljs-number\">5000</span>)\n}\n</code></pre>\n<p>  看到这三行代码，也许你会不耐烦道：又要讲闭包？要吐了好么？别急，让我们先来思考一下，这段代码在浏览器中的执行结果是什么？</p>\n<p>  甲：顺序打印0到9？<br/>\n  乙：这题我见过，打印十个10！</p>\n<p>  执行结果显示，浏览器打印出了十个10，按下回车到打印之前其实间隔了5秒左右，貌似乙胜出了。但如果你足够细心，你会发现几个问题：</p>\n<p>  为什么会循环打印十个10而不是0到9？</p>\n<p>从结果来看，for循环执行完跳出之后，才开始执行setTimeout（所以j才等于10），为什么不是每次迭代都执行一次setTimeout呢？</p>\n<p>  如果上述三个问题你都能回答上来，恭喜你，你已经开始掌握了JavaScript深层次的知识，如果不能，那就乖乖往下看吧！</p>\n<p>  为什么会循环打印十个10</p>\n<p>  许多人习惯用第二个问题中的执行结果来回答这个问题：“for循环执行完跳出之后，才开始执行setTimeout，所以才打印了十个10”。这样的答案，只能说是既应付了自己，又应付了别人。其实，要解答第一个问题，首先要解答的，就是第二个问题。</p>\n<h5>为什么不是每次迭代都执行一次setTimeout</h5>\n<p>  大家都知道，JavaScript在ES6出现以前，是没有块状作用域的，这就意味着， 在for循环中用var定义的变量j，其实是属于全局的，即在全局范围内都可以被访问到，既然如此，那其实整个全局作用域中就只有一个j，每次for循环都是在更新这个j。那么现在关键的问题在于，为什么整个for循环会先于setTimeout执行，而不是我们正常理解的，一次迭代执行一次。<br/>\n  这就涉及到了JavaScript的核心特性：<strong><em>单线程</em></strong>。<br/>\n  JavaScript设计的初衷，是浏览器用来与用户进行交互和DOM操作的。这就决定了它必须是单线程的，设想JavaScript同事有两个线程，一个线程在DOM节点添加内容，一个线程删除该节点，浏览器就会出现混乱。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变。<br/>\n  单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br/>\n  为了优化单线程的性能，JavaScript将任务分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入\"任务队列\"（task queue）的任务，只有主线程中的同步任务执行完毕，异步任务才会进入执行队列执行。只要主线程空了，就会去读取\"任务队列\"，这就是JavaScript的运行机制。这个过程会不断重复。<br/>\n  而setTimeout，就被JavaScript定义为异步任务。每次for循环的迭代，都将setTimeout中的回调函数加入任务队列等待执行。也就是说，只有同步任务中的for循环完全结束，主线程中才会去任务队列中找到尚未执行的十个setTimeout（十次迭代）回调函数并顺序执行（先进先出）。而此时，i已经经过循环结束变成了10，所以，此时主线程执行的，是十个一摸一样的打印i的回调函数，即打印十个10。至此就完美回答了第一和第二个问题，文章开头的代码与下面的代码其实是等价的：</p>\n<pre class=\"hljs javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10</span>;i++){}\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\nsetTimeout(<span class=\"hljs-built_in\">console</span>.log(i),<span class=\"hljs-number\">5000</span>)\n</code></pre>\n\n          ', '0', '2018-02-26 14:27:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('16', 'bootstrap栅格系统分析', '\n      bootstrap栅格系统 bootstrap栅格系统是bootstrap的核心以及精髓所在 一、容器 1.流体容器流体容器宽度为100%（即占当前视口的宽度） 2.固定容器...\n    ', '\n            <h1>bootstrap栅格系统</h1>\n<blockquote>\n<p>bootstrap栅格系统是bootstrap的核心以及精髓所在</p>\n</blockquote>\n<h2>一、容器</h2>\n<ul>\n<li>1.流体容器\n<ul>\n<li>流体容器宽度为100%（即占当前视口的宽度）</li>\n</ul>\n</li>\n<li>2.固定容器<br/>\n大于等于1200(lg 大屏pc) : 1170（1140+槽宽）<br/>\n大于等于992(md 中屏pc) : 小于1200:970（940+槽宽）<br/>\n大于等于768(sm 平板 ): 小于992:750（720+槽宽）<br/>\n小于768(xs 移动手机) : auto</li>\n</ul>\n<hr/>\n<h2>二、栅格系统的应用</h2>\n<h3>1. 栅格参数</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">超小屏幕 手机 (&lt;768px)</th>\n<th style=\"text-align:center\">小屏幕 平板 (≥768px)</th>\n<th style=\"text-align:center\">中等屏幕 桌面显示器 (≥992px)</th>\n<th style=\"text-align:center\">大屏幕 大桌面显示器 (≥1200px)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">栅格系统行</td>\n<td style=\"text-align:center\">总是水平排列</td>\n<td style=\"text-align:center\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列</td>\n<td style=\"text-align:center\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列</td>\n<td style=\"text-align:center\">开始是堆叠在一起的，当大于这些阈值时将变为水平排列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.container 最大宽度</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">750px</td>\n<td style=\"text-align:center\">970px</td>\n<td style=\"text-align:center\">1170px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">类前缀</td>\n<td style=\"text-align:center\">.col-xs-</td>\n<td style=\"text-align:center\">.col-sm-</td>\n<td style=\"text-align:center\">.col-md-</td>\n<td style=\"text-align:center\">.col-lg-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">列数（column）</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">最大列宽</td>\n<td style=\"text-align:center\">自动</td>\n<td style=\"text-align:center\">~62px</td>\n<td style=\"text-align:center\">~81px</td>\n<td style=\"text-align:center\">~97px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">槽（gutter）宽</td>\n<td style=\"text-align:center\">30px （每列左右均有 15px）</td>\n<td style=\"text-align:center\">30px</td>\n<td style=\"text-align:center\">30px</td>\n<td style=\"text-align:center\">30px</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可嵌套</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">偏移（Offsets）</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">列排序</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<h3>2. 栅格组合</h3>\n<blockquote>\n<p>利用栅格系统在不同设备状态下页面布局有不同的提现</p>\n</blockquote>\n<p><strong>例如</strong></p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-10 col-md-6\"</span>></span>col-lg-10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-lg-2 col-md-6\"</span>></span>col-lg-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3>3. 列偏移和列排序</h3>\n<p><strong>列排序</strong></p>\n<blockquote>\n<p>通过使用 .col-xx-push-y和 .col-xx-pull-y类就可以很容易的改变列（column）的顺序。</p>\n</blockquote>\n<p>实际上在控制元素left值</p>\n<p><strong>例如</strong></p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-9 col-md-push-3\"</span>></span>.col-md-9 .col-md-push-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-3 col-md-pull-9\"</span>></span>.col-md-3 .col-md-pull-9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p><strong>列偏移</strong></p>\n<blockquote>\n<p>.col-xx-offset-y 类可以将列向右侧偏移<br/>\n实际上在控制元素margin-left的值</p>\n</blockquote>\n<p><strong>例如</strong></p>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row\"</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-9 col-md-push-3\"</span>></span>.col-md-9 .col-md-push-3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"col-md-3 col-md-pull-9\"</span>></span>.col-md-3 .col-md-pull-9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3>4. 响应式工具的使用</h3>\n<blockquote>\n<p>利用.visible-xx  和 .hidden-xx  控制元素在该xx设备上的显示与隐藏</p>\n</blockquote>\n<pre class=\"hljs xml\"><code class=\"xml\"><span class=\"hljs-comment\">&lt;!--该元素在视口小于768px的情况下隐藏--></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"jumbotron hidden-xs\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-comment\">&lt;!--该元素在视口小于768px的情况下显示--></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"jumbotron visible-xs\"</span>></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>></span>Hello, world!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3>5. 栅格盒模型设计的精妙之处</h3>\n<p><strong>容器两边具有15px的padding</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">目标</th>\n<th style=\"text-align:center\">规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">列</td>\n<td style=\"text-align:center\">两边具有15px的padding</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">行</td>\n<td style=\"text-align:center\">两边具有-15px的margin</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>为了维护槽宽的规则，\n<ul>\n<li>列两边必须得要15px的padding</li>\n</ul>\n</li>\n<li>为了能使列嵌套行\n<ul>\n<li>行两边必须要有-15px的margin</li>\n</ul>\n</li>\n<li>为了让容器可以包裹住行\n<ul>\n<li>容器两边必须要有15px的padding</li>\n</ul>\n</li>\n</ul>\n<hr/>\n<h2>三、栅格系统源码解析</h2>\n<h3>1.基本实现的流程</h3>\n<ul>\n<li><strong>固定和流体容器的公共样式在less混合中的代码</strong></li>\n</ul>\n<p><strong>注：@grid-gutter-widt：槽宽</strong></p>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">/*@gutter在bootstrap里默认为30px*/</span>\n<span class=\"hljs-selector-class\">.container-fixed</span>(<span class=\"hljs-variable\">@gutter</span>: <span class=\"hljs-variable\">@grid-gutter-width</span>) {\n  <span class=\"hljs-attribute\">margin-right</span>: auto;\n  <span class=\"hljs-attribute\">margin-left</span>: auto;\n  <span class=\"hljs-attribute\">padding-left</span>:  floor((<span class=\"hljs-variable\">@gutter</span> / <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">//向下取整 (此时默认值为15px)</span>\n  <span class=\"hljs-attribute\">padding-right</span>: ceil((<span class=\"hljs-variable\">@gutter</span> / <span class=\"hljs-number\">2</span>));  <span class=\"hljs-comment\">//向上取整 (此时默认值为15px)</span>\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:extend(.clearfix</span> <span class=\"hljs-keyword\">all</span>); <span class=\"hljs-comment\">//继承清除浮动的样式</span>\n}\n<span class=\"hljs-comment\">/*.clearfix的样式*/</span>\n<span class=\"hljs-selector-class\">.clearfix</span>() {\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:before</span>,\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:after</span> {\n    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">\" \"</span>; <span class=\"hljs-comment\">// 1</span>\n    <span class=\"hljs-attribute\">display</span>: table; <span class=\"hljs-comment\">// 2</span>\n  }\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:after</span> {\n    <span class=\"hljs-attribute\">clear</span>: both;\n  }\n}\n</code></pre>\n<ul>\n<li><strong>固定容器和流体容器的样式在less实际中的代码</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-selector-class\">.container</span> {\n  <span class=\"hljs-selector-class\">.container-fixed</span>();<span class=\"hljs-comment\">//继承默认样式</span>\n  <span class=\"hljs-comment\">//利用媒体查询判断当前应当采用的宽度</span>\n  <span class=\"hljs-comment\">//移动优先！</span>\n  <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-sm-min</span>) {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-variable\">@container-sm</span>;\n  }\n  <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-md-min</span>) {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-variable\">@container-md</span>;\n  }\n  <span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-lg-min</span>) {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-variable\">@container-lg</span>;\n  }\n}\n<span class=\"hljs-comment\">//流体容器</span>\n<span class=\"hljs-selector-class\">.container-fluid</span> {\n  <span class=\"hljs-selector-class\">.container-fixed</span>();\n}\n</code></pre>\n<ul>\n<li><strong>行元素默认样式在less混合中的代码</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-selector-class\">.make-row</span>(<span class=\"hljs-variable\">@gutter</span>: <span class=\"hljs-variable\">@grid-gutter-width</span>) {\n  <span class=\"hljs-attribute\">margin-left</span>:  ceil((<span class=\"hljs-variable\">@gutter</span> / -<span class=\"hljs-number\">2</span>));\n  <span class=\"hljs-attribute\">margin-right</span>: floor((<span class=\"hljs-variable\">@gutter</span> / -<span class=\"hljs-number\">2</span>));\n  <span class=\"hljs-selector-tag\">&amp;</span><span class=\"hljs-selector-pseudo\">:extend(.clearfix</span> <span class=\"hljs-keyword\">all</span>);\n}\n</code></pre>\n<ul>\n<li><strong>行元素样式在less中的代码</strong></li>\n</ul>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-class\">.row</span> {\n  .make-row();\n}\n</code></pre>\n<ul>\n<li><strong>列元素样式在less中实际的代码</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">// 列的默认样式</span>\n<span class=\"hljs-selector-class\">.make-grid-columns</span>();\n<span class=\"hljs-comment\">// 判断当前视口的大小采用不同的样式</span>\n<span class=\"hljs-comment\">//移动优先!</span>\n<span class=\"hljs-selector-class\">.make-grid</span>(xs);\n<span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-sm-min</span>) {\n  <span class=\"hljs-selector-class\">.make-grid</span>(sm);\n}\n<span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-md-min</span>) {\n  <span class=\"hljs-selector-class\">.make-grid</span>(md);\n}\n<span class=\"hljs-keyword\">@media</span> (<span class=\"hljs-attribute\">min-width</span>: <span class=\"hljs-variable\">@screen-lg-min</span>) {\n  <span class=\"hljs-selector-class\">.make-grid</span>(lg);\n}\n</code></pre>\n<h3>2.核心代码</h3>\n<ul>\n<li><strong>列元素样式的初步实现</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//列元素的默认样式实现</span>\n<span class=\"hljs-selector-class\">.make-grid-columns</span>() {\n   <span class=\"hljs-comment\">//此时@index为1</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>) { \n    <span class=\"hljs-variable\">@item:</span> <span class=\"hljs-string\">~\".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}\"</span>;\n    <span class=\"hljs-comment\">// @item: ~\".col-xs-1, .col-sm-1, .col-md-1, .col-lg-1\";//不编译</span>\n    <span class=\"hljs-selector-class\">.col</span>((<span class=\"hljs-variable\">@index</span> + <span class=\"hljs-number\">1</span>), <span class=\"hljs-variable\">@item</span>);\n    <span class=\"hljs-comment\">// .col(2,  ~\".col-xs-1, .col-sm-1, .col-md-1, .col-lg-1\");</span>\n  }\n<span class=\"hljs-comment\">//利用递归循环创建所有列元素的样式</span>\n<span class=\"hljs-comment\">//@grid-columns默认为12 @list为@item的集合</span>\n<span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@list</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> =&lt; <span class=\"hljs-variable\">@grid-columns</span>) {\n<span class=\"hljs-comment\">//当@index=&lt;12时执行以下代码</span>\n    <span class=\"hljs-variable\">@item:</span> <span class=\"hljs-string\">~\".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}\"</span>;\n    <span class=\"hljs-comment\">//此时index为2则</span>\n    <span class=\"hljs-comment\">//@item: ~\".col-xs-2, .col-sm-2, .col-md-2, .col-lg-2\";</span>\n    <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-number\">3</span>, ~\".col-xs-<span class=\"hljs-number\">1</span>, .col-sm-<span class=\"hljs-number\">1</span>, .col-md-<span class=\"hljs-number\">1</span>, \n    .col-lg-<span class=\"hljs-number\">1</span>, .col-xs-<span class=\"hljs-number\">2</span>, .col-sm-<span class=\"hljs-number\">2</span>, .col-md-<span class=\"hljs-number\">2</span>, .col-lg-<span class=\"hljs-number\">2</span>\");\n    <span class=\"hljs-comment\">//因为3&lt;=12则继续执行递归</span>\n    <span class=\"hljs-comment\">//由此可以当递归完成时</span>\n    <span class=\"hljs-variable\">@list:</span>.col-xs-<span class=\"hljs-number\">1</span>, .col-sm-<span class=\"hljs-number\">1</span>, .col-md-<span class=\"hljs-number\">1</span>, .col-lg-<span class=\"hljs-number\">1</span>,\n          .col-xs-<span class=\"hljs-number\">2</span>, .col-sm-<span class=\"hljs-number\">2</span>, .col-md-<span class=\"hljs-number\">2</span>, .col-lg-<span class=\"hljs-number\">2</span>,\n          ...\n          .col-xs-<span class=\"hljs-number\">12</span>, .col-sm-<span class=\"hljs-number\">12</span>, .col-md-<span class=\"hljs-number\">12</span>, .col-lg-<span class=\"hljs-number\">12</span>\n}\n<span class=\"hljs-comment\">//当@index>12时执行下面的代码</span>\n<span class=\"hljs-comment\">//以上代码完成时递归完成时index>13</span>\n<span class=\"hljs-comment\">//执行以下代码</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@list</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-variable\">@grid-columns</span>) { \n    <span class=\"hljs-variable\">@{list}</span> {\n      <span class=\"hljs-attribute\">position</span>: relative;\n      <span class=\"hljs-attribute\">min-height</span>: <span class=\"hljs-number\">1px</span>;\n      <span class=\"hljs-attribute\">padding-left</span>:  ceil((<span class=\"hljs-variable\">@grid-gutter-width</span> / <span class=\"hljs-number\">2</span>));\n      <span class=\"hljs-attribute\">padding-right</span>: floor((<span class=\"hljs-variable\">@grid-gutter-width</span> / <span class=\"hljs-number\">2</span>));\n    }\n    <span class=\"hljs-comment\">//由于此时@list状态已经完成则以下代码为</span>\n    <span class=\"hljs-comment\">//.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1,</span>\n    <span class=\"hljs-comment\">//.col-xs-2, .col-sm-2, .col-md-2, .col-lg-2,</span>\n    <span class=\"hljs-comment\">//...</span>\n    <span class=\"hljs-comment\">//.col-xs-12, .col-sm-12, .col-md-12, .col-lg-12{</span>\n     <span class=\"hljs-comment\">// position: relative;</span>\n      <span class=\"hljs-comment\">//min-height: 1px;</span>\n      <span class=\"hljs-comment\">//padding-left:  ceil((@grid-gutter-width / 2));</span>\n      <span class=\"hljs-comment\">//padding-right: floor((@grid-gutter-width / 2));</span>\n    <span class=\"hljs-comment\">//}</span>\n    <span class=\"hljs-comment\">//完成所有列的状态的默认值</span>\n    <span class=\"hljs-comment\">//及.make-grid-columns()完成所有列的状态的默认样式 </span>\n  }\n  <span class=\"hljs-comment\">//传入默认值1</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-number\">1</span>); \n}\n</code></pre>\n<ul>\n<li><strong>列元素具体样式的实现</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-selector-class\">.make-grid</span>(<span class=\"hljs-variable\">@class</span>) {\n  <span class=\"hljs-comment\">//1.写入所有列的默认值</span>\n  <span class=\"hljs-selector-class\">.float-grid-columns</span>(<span class=\"hljs-variable\">@class</span>);\n  <span class=\"hljs-comment\">//2.规定个个列的宽度</span>\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@grid-columns</span>, <span class=\"hljs-variable\">@class</span>, width);\n  <span class=\"hljs-comment\">//3.列排列控制的是目标元素的left或right的值由于值不能为0所以分开操作</span>\n  <span class=\"hljs-comment\">//3.1列向右排列</span>\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@grid-columns</span>, <span class=\"hljs-variable\">@class</span>, pull);\n  <span class=\"hljs-comment\">//3.2列向右排列</span>\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@grid-columns</span>, <span class=\"hljs-variable\">@class</span>, push);\n  <span class=\"hljs-comment\">//4.设置列偏移 控制的是margin-left;</span>\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@grid-columns</span>, <span class=\"hljs-variable\">@class</span>, offset);\n}\n</code></pre>\n<ul>\n<li><strong>写入所有列的默认值</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//@class 为 xs,sm,md,lg</span>\n<span class=\"hljs-comment\">//下面的代码里@class的值设为xs</span>\n<span class=\"hljs-selector-class\">.float-grid-columns</span>(<span class=\"hljs-variable\">@class</span>) {\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>) { \n    <span class=\"hljs-variable\">@item:</span> <span class=\"hljs-string\">~\".col-@{class}-@{index}\"</span>;\n    <span class=\"hljs-comment\">//@item:~\".col-xs-1\";</span>\n    <span class=\"hljs-selector-class\">.col</span>((<span class=\"hljs-variable\">@index</span> + <span class=\"hljs-number\">1</span>), <span class=\"hljs-variable\">@item</span>);\n    <span class=\"hljs-comment\">//.col(2, ~\".col-xs-1\");</span>\n  }\n  <span class=\"hljs-comment\">//同样利用递归循环index至12完成对每个@class列的属性</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@list</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> =&lt; <span class=\"hljs-variable\">@grid-columns</span>) { \n    <span class=\"hljs-variable\">@item:</span> <span class=\"hljs-string\">~\".col-@{class}-@{index}\"</span>;\n    <span class=\"hljs-comment\">//@item: ~\".col-xs-2\";</span>\n    <span class=\"hljs-selector-class\">.col</span>((<span class=\"hljs-variable\">@index</span> + <span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">~\"@{list}, @{item}\"</span>);\n    <span class=\"hljs-comment\">//.col(3, ~\".col-xs-1, .col-xs-2\");</span>\n    <span class=\"hljs-comment\">//递归完成时@list为：</span>\n    <span class=\"hljs-comment\">//.col-xs-1, .col-xs-2,...,.col-xs-12</span>\n  }\n  <span class=\"hljs-comment\">//当递归完成时执行下面的代码</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@list</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-variable\">@grid-columns</span>) { \n    <span class=\"hljs-variable\">@{list}</span> {\n      <span class=\"hljs-attribute\">float</span>: left;\n    }\n    <span class=\"hljs-comment\">//以上代码及为</span>\n    <span class=\"hljs-comment\">//.col-xs-1, .col-xs-2,...,.col-xs-12{</span>\n     <span class=\"hljs-comment\">//float: left;</span>\n    <span class=\"hljs-comment\">//}</span>\n  <span class=\"hljs-comment\">//}</span>\n  <span class=\"hljs-comment\">//填入@index的默认值1</span>\n  <span class=\"hljs-selector-class\">.col</span>(<span class=\"hljs-number\">1</span>); \n}\n</code></pre>\n<ul>\n<li><strong>设置宽度列排列和列偏移的入口代码</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//由于当前状态下index为12则从12开始递归至0</span>\n<span class=\"hljs-comment\">//@index索引 @class栅格类 @type 要进行操作的属性</span>\n<span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> >= <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>);\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>((<span class=\"hljs-variable\">@index</span> - <span class=\"hljs-number\">1</span>), <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>);\n}\n</code></pre>\n<ul>\n<li><strong>规定个个列的宽度</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//当@type = width时执行的代码</span>\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = width) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-</span><span class=\"hljs-variable\">@{index}</span> {\n    <span class=\"hljs-attribute\">width</span>: percentage((<span class=\"hljs-variable\">@index</span> / <span class=\"hljs-variable\">@grid-columns</span>));\n  }\n}\n<span class=\"hljs-comment\">//以上代码可以表示为</span>\n<span class=\"hljs-selector-class\">.loop-grid-columns</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@index</span> >= <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = width) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-</span><span class=\"hljs-variable\">@{index}</span> {\n    <span class=\"hljs-attribute\">width</span>: percentage((<span class=\"hljs-variable\">@index</span> / <span class=\"hljs-variable\">@grid-columns</span>));\n  }\n  <span class=\"hljs-comment\">//.col-xs-12 {</span>\n  <span class=\"hljs-comment\">//   width: percentage(12/12));//将数值转换为百分比</span>\n  <span class=\"hljs-comment\">//}</span>\n  \n}\n  <span class=\"hljs-selector-class\">.loop-grid-columns</span>((<span class=\"hljs-variable\">@index</span> - <span class=\"hljs-number\">1</span>), <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>);\n  <span class=\"hljs-comment\">//再次执行</span>\n  <span class=\"hljs-comment\">//.col-xs-11 {</span>\n    <span class=\"hljs-comment\">//width: percentage(11/12));//将数值转换为百分比</span>\n  <span class=\"hljs-comment\">//}</span>\n}\n<span class=\"hljs-comment\">//递归完成后得到的是</span>\n<span class=\"hljs-comment\">//.col-xs-12 {</span>\n<span class=\"hljs-comment\">//    width: percentage(12/12));//将数值转换为百分比</span>\n<span class=\"hljs-comment\">//}</span>\n<span class=\"hljs-comment\">//.col-xs-11 {</span>\n<span class=\"hljs-comment\">//    width: percentage(11/12));//将数值转换为百分比</span>\n<span class=\"hljs-comment\">//}....</span>\n<span class=\"hljs-comment\">//.col-xs-1 {</span>\n<span class=\"hljs-comment\">//    width: percentage(1/12));//将数值转换为百分比</span>\n<span class=\"hljs-comment\">//}</span>\n</code></pre>\n<ul>\n<li><strong>列排列控制</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//当@type = push执行如下代码</span>\n<span class=\"hljs-comment\">//@index的递减在.loop-grid-columns(@index, @class, @type) when (@index >= 0) 环境下已经实现</span>\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = push) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-push-</span><span class=\"hljs-variable\">@{index}</span> {\n    <span class=\"hljs-attribute\">left</span>: percentage((<span class=\"hljs-variable\">@index</span> / <span class=\"hljs-variable\">@grid-columns</span>));\n  }\n  <span class=\"hljs-comment\">//以上代码生成的值为</span>\n  <span class=\"hljs-comment\">//.col-xs-push-12 {</span>\n    <span class=\"hljs-comment\">//left: percentage(12/12);</span>\n  <span class=\"hljs-comment\">//}</span>\n  <span class=\"hljs-comment\">//.col-xs-push-11 {</span>\n    <span class=\"hljs-comment\">//left: percentage(11/12);</span>\n  <span class=\"hljs-comment\">//}....</span>\n  <span class=\"hljs-comment\">//.col-xs-push-1 {</span>\n    <span class=\"hljs-comment\">//left: percentage(1/12);</span>\n  <span class=\"hljs-comment\">//}</span>\n}\n<span class=\"hljs-comment\">//当index为0时执行下面的代码</span>\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = push) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> = <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-push-0</span> {\n    <span class=\"hljs-attribute\">left</span>: auto;\n  }\n  <span class=\"hljs-comment\">//.col-xs-push-0 {</span>\n    <span class=\"hljs-comment\">//left: auto;</span>\n  <span class=\"hljs-comment\">//}</span>\n}\n\n<span class=\"hljs-comment\">//向左偏移生成模式与向右相同</span>\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = pull) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> > <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-pull-</span><span class=\"hljs-variable\">@{index}</span> {\n    <span class=\"hljs-attribute\">right</span>: percentage((<span class=\"hljs-variable\">@index</span> / <span class=\"hljs-variable\">@grid-columns</span>));\n  }\n}\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = pull) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-variable\">@index</span> = <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-pull-0</span> {\n    <span class=\"hljs-attribute\">right</span>: auto;\n  }\n}\n</code></pre>\n<ul>\n<li><strong>列偏移控制</strong></li>\n</ul>\n<pre class=\"hljs less\"><code class=\"less\"><span class=\"hljs-comment\">//当@type = offset时执行如下代码</span>\n<span class=\"hljs-selector-class\">.calc-grid-column</span>(<span class=\"hljs-variable\">@index</span>, <span class=\"hljs-variable\">@class</span>, <span class=\"hljs-variable\">@type</span>) <span class=\"hljs-keyword\">when</span> (<span class=\"hljs-variable\">@type</span> = offset) {\n  <span class=\"hljs-selector-class\">.col-</span><span class=\"hljs-variable\">@{class}</span><span class=\"hljs-selector-tag\">-offset-</span><span class=\"hljs-variable\">@{index}</span> {\n    <span class=\"hljs-attribute\">margin-left</span>: percentage((<span class=\"hljs-variable\">@index</span> / <span class=\"hljs-variable\">@grid-columns</span>));<span class=\"hljs-comment\">//值转换为百分比</span>\n  }\n  <span class=\"hljs-comment\">//运行结果</span>\n  <span class=\"hljs-comment\">//.col-xs-offset-12 {</span>\n    <span class=\"hljs-comment\">//margin-left: percentage(12/12);</span>\n  <span class=\"hljs-comment\">//}...</span>\n  <span class=\"hljs-comment\">//.col-xs-offset-1 {</span>\n    <span class=\"hljs-comment\">//margin-left: perc/entage(1/12);</span>\n  <span class=\"hljs-comment\">//}</span>\n}\n</code></pre>\n<p><a href=\"https://link.jianshu.com?t=http%3A%2F%2Fblog.fushily.cn%2F2018%2F03%2F01%2F%25E7%25A7%25BB%25E5%258A%25A8%25E7%25AB%25AF%25E5%2588%259D%25E6%258E%25A2%2F\" target=\"_blank\" rel=\"nofollow\">原文链接</a>.</p>\n\n          ', '0', '2018-03-07 18:38:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('17', 'ajax的同源策略', '\n      问题 之前帮忙做的广告机器人数据提交的部分，利用ajax的XMLHTTPRequest提交到服务器的时候总是报错，错误类型是不同源。想到浏览器中的同源策略，明白了问题的原因。...\n    ', '\n            <h2>问题</h2>\n<p>之前帮忙做的广告机器人数据提交的部分，利用ajax的XMLHTTPRequest提交到服务器的时候总是报错，错误类型是不同源。想到浏览器中的同源策略，明白了问题的原因。</p>\n<h2>同源策略</h2>\n<p>简单的说，就是浏览器不允许两个不同源的域名之间交换信息，那么这里就有两个问题。一是，什么信息不允许交换；二是，怎样算不同源。</p>\n<p>阮一峰的这篇博客<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F04%2Fsame-origin-policy.html\" target=\"_blank\" rel=\"nofollow\">浏览器同源政策及其规避方法</a>其实已经介绍得比较清楚。引用一下，第一个问题：</p>\n<blockquote>\n<p>目前，如果非同源，共有三种行为受到限制。<br/>\n（1） Cookie、LocalStorage 和 IndexDB 无法读取。<br/>\n（2） DOM 无法获得。<br/>\n（3） AJAX 请求不能发送。</p>\n</blockquote>\n<p>第二个问题：</p>\n<blockquote>\n<p>所谓\"同源\"指的是\"三个相同\":<br/>\n协议相同<br/>\n域名相同<br/>\n端口相同</p>\n</blockquote>\n<p>同源策略的目的就是为了浏览器的安全，防止恶意脚本的肆意破坏。但是值得注意的是，&lt;script>,&lt;img>,&lt;iframe>等，像类似这种带“src”属性的标签是可以跨域加载资源的，只不过限制了其读写返回的内容。</p>\n<h2>解决办法</h2>\n<p>可以看到的是，同源策略限制了ajax的不同源请求，那么有时候我们还是需要跨域的，如何解决这个问题呢？阮一峰老师在这篇文章中也给出了三种方法。</p>\n<ol>\n<li>利用JSONP</li>\n<li>websocket</li>\n<li>CORS</li>\n</ol>\n<p>第一种方法是利用了像&lt;script>这样的标签可以加载跨域资源，客户端向服务端请求JSON数据，服务端通过将数据放在回调函数中传回来。</p>\n<p>第二种方法本质原理是websocket请求头中本身就有origin信息，服务器可以通过这个源信息判断要不要给它传数据，所以websocket不受同源策略的影响。</p>\n<p>第三种方法原理和第二种方法类似，就是在请求中多出一个origin头信息，然后服务端收到信息后，判断要不要给它传数据，并且在返回的信息中多加入几个头信息来传达接收或不接受的信息，从而浏览器做出反应。具体的可以参考阮一峰的文章<a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2016%2F04%2Fcors.html\" target=\"_blank\" rel=\"nofollow\">跨域资源共享 CORS 详解</a></p>\n<h2>总结</h2>\n<p>我在实际的项目过程中，使用了第三种方法，在后台对php和apache进行了跨域的设置。具体可以参考<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fwww.cnblogs.com%2Flxwphp%2Fp%2F8080188.html\" target=\"_blank\" rel=\"nofollow\"># </a><a href=\"https://link.jianshu.com?t=http%3A%2F%2Fwww.cnblogs.com%2Flxwphp%2Fp%2F8080188.html\" target=\"_blank\" rel=\"nofollow\">Ajax 跨域，这应该是最全的解决方案了</a><br/>\n。</p>\n<p>但是奇怪的是，客户端放到移动端之后，就好像没有跨域的问题了，同样的服务端，在电脑上显示跨域问题，在手机上操作就可以提交了，这是我没想明白的地方。</p>\n\n          ', '0', '2018-03-07 21:57:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('18', '前端利器之less入门', '\n      less 是什么？ Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。less，是方便我们快速编写...\n    ', '\n            <h3>less 是什么？</h3>\n<p>Less 是一门 CSS 预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。<br/>\nless，是方便我们快速编写CSS的工具，它增强了CSS代码的扩展性和复用性。<br/>\nLess 可以运行在 Node 或浏览器端。</p>\n<h3>less能为我们做什么？</h3>\n<p>下边让我们来看一段我们经常写的代码</p>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-comment\">/**\n我们经常写浏览器的兼容，假设我们写icon\n**/</span>\n<span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.home</span><span class=\"hljs-selector-class\">.active</span> <span class=\"hljs-selector-tag\">i</span> {\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-home-on.png\'</span>) no-repeat center;\n    <span class=\"hljs-attribute\">background-size</span>: contain;\n    <span class=\"hljs-attribute\">-webkit-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-moz-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-o-background-size</span>: contain;\n}\n<span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.home</span> <span class=\"hljs-selector-tag\">i</span> {\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-home-off.png\'</span>) no-repeat center;\n    <span class=\"hljs-attribute\">background-size</span>: contain;\n    <span class=\"hljs-attribute\">-webkit-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-moz-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-o-background-size</span>: contain;\n}\n<span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.topics</span><span class=\"hljs-selector-class\">.active</span> <span class=\"hljs-selector-tag\">i</span> {\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-circle-on.png\'</span>) no-repeat center;\n    <span class=\"hljs-attribute\">background-size</span>: contain;\n    <span class=\"hljs-attribute\">-webkit-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-moz-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-o-background-size</span>: contain;\n}\n<span class=\"hljs-selector-tag\">nav</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.topics</span> <span class=\"hljs-selector-tag\">i</span> {\n    <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-circle-off.png\'</span>) no-repeat center;\n    <span class=\"hljs-attribute\">background-size</span>: contain;\n    <span class=\"hljs-attribute\">-webkit-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-moz-background-size</span>: contain;\n    <span class=\"hljs-attribute\">-o-background-size</span>: contain;\n}\n\n</code></pre>\n<ul>\n<li>一遍一遍写一大段一大段一样的代码，有木有很乏味，如果要换一个contain为cover呢？<br/>\n改疯了有木有</li>\n</ul>\n<blockquote>\n<p>让我们看看less会怎么做</p>\n</blockquote>\n<pre class=\"hljs bash\"><code class=\"bash\">\n//相当于新建一个函数 Mixins（混入）\n.border-radius(@radius:10px){\nborder-radius:@radius;\n -webkit-border-radius:@radius;\n -moz-border-radius:@radius;\n  -o-border-radius:@radius;\n}\n.background-size(@<span class=\"hljs-built_in\">type</span>){\n  background-size: @<span class=\"hljs-built_in\">type</span>;\n  -webkit-background-size: @<span class=\"hljs-built_in\">type</span>;\n  -moz-background-size: @<span class=\"hljs-built_in\">type</span>;\n  -o-background-size: @<span class=\"hljs-built_in\">type</span>;\n}\n\n//用法\n.orderList{\n    background-color:<span class=\"hljs-comment\">#E36264;</span>\n    width:100px;\n    height:200px;\n    .border-radius(15px);//利用函数可以省去很多的重复兼容代码\n  .border-radius;//利用函数可以省去很多的重复兼容代码\n  .background-size(contain);\n}\n\n\n//这么写整个世界都美好了\nnav a.topics i {\n    background: url(<span class=\"hljs-string\">\'images/nav-circle-off.png\'</span>) no-repeat center;\n    .background-size(contain);\n}\n</code></pre>\n<ul>\n<li>\n<strong>说明</strong> 像 JavaScript 中 arguments一样，Mixins 也有这样一个变量：@arguments。<br/>\n@arguments 在 Mixins 中具是一个很特别的参数，当 Mixins 引用这个参数时，<br/>\n该参数表示所有的变量，很多情况下，这个参数可以省去你很多代码。</li>\n</ul>\n<pre class=\"hljs ruby\"><code class=\"ruby\">.boxShadow(@x<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">0</span>,@y<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">0</span>,@blur<span class=\"hljs-symbol\">:</span><span class=\"hljs-number\">1</span>px,@color<span class=\"hljs-symbol\">:</span><span class=\"hljs-comment\">#000){</span>\n -moz-box-<span class=\"hljs-symbol\">shadow:</span> @arguments;\n -webkit-box-<span class=\"hljs-symbol\">shadow:</span> @arguments;\n box-<span class=\"hljs-symbol\">shadow:</span> @arguments;\n }\n <span class=\"hljs-comment\">#header {</span>\n .boxShadow(<span class=\"hljs-number\">2</span>px,<span class=\"hljs-number\">2</span>px,<span class=\"hljs-number\">3</span>px,<span class=\"hljs-comment\">#f36);</span>\n }\n</code></pre>\n<h4>变量写法</h4>\n<blockquote>\n<p>less代码</p>\n</blockquote>\n<pre class=\"hljs cpp\"><code class=\"cpp\"><span class=\"hljs-comment\">/**\n  大家都遇到过这样的问题\n  我们做换肤功能的时候都有一个主色调，\n  我们写完了代码设计师说我想更换个主色调，\n  这时候你就会发现，我有100个地方用了主色调，\n  然后只能苦逼的改100次\n  太难受了！！有木有？？有一个变量直接提出来多好？\n\n**/</span>\n<span class=\"hljs-comment\">//定义一个变量</span>\n@colorFff:<span class=\"hljs-meta\">#fff;</span>\n\n<span class=\"hljs-comment\">//用法</span>\nfooter{\n  background-color: @colorFff\n}\nnav{\n  color: @colorFff;\n}\nheader{\n  border-right:<span class=\"hljs-number\">1</span>px solid  @colorFff;\n}\n\n</code></pre>\n<blockquote>\n<p>最终生成的代码</p>\n</blockquote>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-tag\">footer</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ffffff</span>;\n}\n<span class=\"hljs-selector-tag\">nav</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ffffff</span>;\n}\n<span class=\"hljs-selector-tag\">header</span> {\n  <span class=\"hljs-attribute\">border-right</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#ffffff</span>;\n}\n</code></pre>\n<h4>代码片段写法</h4>\n<blockquote>\n<p>less代码</p>\n</blockquote>\n<pre class=\"hljs java\"><code class=\"java\"><span class=\"hljs-comment\">//又是重复代码，less告诉你可以这么写 有没有觉得自己很会过日子，原来可以这么省</span>\n\n<span class=\"hljs-comment\">//定义一个公共样式</span>\n.icon20{\n  width: <span class=\"hljs-number\">20</span>px;\n  height: <span class=\"hljs-number\">20</span>px;\n  display: inline-block;\n}\n\n<span class=\"hljs-comment\">//用起来</span>\n.icon-my{\n  .icon20;\n  background: url(<span class=\"hljs-string\">\'images/nav-my-off.png\'</span>) no-repeat center;\n  .background-size(contain);\n}\n.icon-car{\n  .icon20;\n  background: url(<span class=\"hljs-string\">\'images/nav-car-off.png\'</span>) no-repeat center;\n  .background-size(contain);\n}\n</code></pre>\n<blockquote>\n<p>对应生成的css<br/>\n又是重复代码，less告诉你可以这么写 有没有觉得自己很会过日子，原来可以这么省</p>\n</blockquote>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-class\">.icon-my</span>{\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-my-off.png\'</span>) no-repeat center;\n}\n\n<span class=\"hljs-selector-class\">.icon-car</span>{\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\'images/nav-car-off.png\'</span>) no-repeat center;\n}\n\n</code></pre>\n<h4>有时候我们需要引用一段less文件</h4>\n<blockquote>\n<p>写法</p>\n</blockquote>\n<pre class=\"hljs cpp\"><code class=\"cpp\"><span class=\"hljs-comment\">/* LESS Document */</span>\n<span class=\"hljs-comment\">//引入一个公共的less文件</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"base.less\"</span>;\n\n</code></pre>\n<h4>嵌套写法</h4>\n<pre class=\"hljs objectivec\"><code class=\"objectivec\"><span class=\"hljs-comment\">//这样的css代码你该不陌生</span>\n.shopcar-item {\n    font-size: <span class=\"hljs-number\">1.5</span>rem;\n    background-color: <span class=\"hljs-meta\">#ffffff;</span>\n    position: relative;\n    padding: <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">70</span>px;\n    border-bottom: <span class=\"hljs-number\">1</span>px solid <span class=\"hljs-meta\">#ededed;</span>\n}\n.shopcar-item img {\n    width: <span class=\"hljs-number\">100</span>%;\n}\n<span class=\"hljs-comment\">//我要选img必须加上前边的那个，好吧 这样还可以接受，那么这样呢？</span>\n.shopcar-item .item-con .add-btn,\n.shopcar-item .item-con .mul-btn {\n    display: <span class=\"hljs-keyword\">inline</span>-block;\n    padding: <span class=\"hljs-number\">5</span>px <span class=\"hljs-number\">10</span>px;\n    background-color: <span class=\"hljs-meta\">#ff4354;</span>\n    color: <span class=\"hljs-meta\">#ffffff;</span>\n    border-radius: <span class=\"hljs-number\">5</span>px;\n    margin: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5</span>px;\n}\n\n\n</code></pre>\n<blockquote>\n<p>我们来看看less怎么写</p>\n</blockquote>\n<pre class=\"hljs objectivec\"><code class=\"objectivec\">\n<span class=\"hljs-comment\">//看看 嵌套关系清晰明了  告别冗长的选择器</span>\n.shopcar-item {\n    font-size: <span class=\"hljs-number\">1.5</span>rem;\n    background-color: <span class=\"hljs-meta\">#ffffff;</span>\n    position: relative;\n    padding: <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">10</span>px <span class=\"hljs-number\">70</span>px;\n    border-bottom: <span class=\"hljs-number\">1</span>px solid <span class=\"hljs-meta\">#ededed;</span>\n\n    img {\n        width: <span class=\"hljs-number\">100</span>%;\n    }\n\n    .item-con{\n      position: relative;\n\n      .add-btn,.mul-btn{\n          display: <span class=\"hljs-keyword\">inline</span>-block;\n          padding: <span class=\"hljs-number\">5</span>px <span class=\"hljs-number\">10</span>px;\n          background-color: <span class=\"hljs-meta\">#ff4354;</span>\n          color: <span class=\"hljs-meta\">#ffffff;</span>\n          border-radius: <span class=\"hljs-number\">5</span>px;\n          margin: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">5</span>px;\n      }\n    }\n}\n\n</code></pre>\n<h4>并且写法</h4>\n<blockquote>\n<p>用less之前我们这么写</p>\n</blockquote>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-class\">.nav</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ededed</span>;\n}\n<span class=\"hljs-selector-class\">.nav</span><span class=\"hljs-selector-class\">.focus</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#cccccc</span>;\n}\n<span class=\"hljs-selector-class\">.nav</span><span class=\"hljs-selector-pseudo\">:after</span> {\n  <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">\"\"</span>;\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n}\n</code></pre>\n<blockquote>\n<p>less告诉你，我们可以这么写，一个元素的各种状态一目了然</p>\n</blockquote>\n<pre class=\"hljs ruby\"><code class=\"ruby\">.nav{\n  background-<span class=\"hljs-symbol\">color:</span> <span class=\"hljs-comment\">#ededed;</span>\n\n  &amp;.focus{\n    background-<span class=\"hljs-symbol\">color:</span> <span class=\"hljs-comment\">#cccccc;</span>\n  }\n\n  &amp;<span class=\"hljs-symbol\">:after</span>{\n    <span class=\"hljs-symbol\">content:</span> <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-symbol\">display:</span> block;\n    <span class=\"hljs-symbol\">width:</span> <span class=\"hljs-number\">100</span>px;\n    <span class=\"hljs-symbol\">height:</span> <span class=\"hljs-number\">100</span>px;\n  }\n\n}\n\n</code></pre>\n<h4>运算及函数</h4>\n<pre class=\"hljs objectivec\"><code class=\"objectivec\"><span class=\"hljs-comment\">//运算及函数</span>\n@init: <span class=\"hljs-meta\">#111111;</span>\n@transition: @init*<span class=\"hljs-number\">2</span>;\n.switchColor {\n color: @transition;\n}\n\n</code></pre>\n<blockquote>\n<p>最终生成的样式</p>\n</blockquote>\n<pre class=\"hljs css\"><code class=\"css\"><span class=\"hljs-selector-class\">.switchColor</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#222222</span>;\n}\n</code></pre>\n<ul>\n<li>上面的例子中使用 LESS 的 operation 是 特性，<br/>\n其实简单的讲，就是对数值型的 value（数字、颜色、变量等）<br/>\n进行加减乘除四则运算</li>\n</ul>\n<h4>我们做响应式布局适配的时候经常要计算rem，</h4>\n<p>用less告别手动计算</p>\n<pre class=\"hljs objectivec\"><code class=\"objectivec\">.px2rem(@name, @px){\n    @{name}: @px / <span class=\"hljs-number\">75</span> * <span class=\"hljs-number\">1</span>rem;\n}\n\n.orderList{\n  .px2rem(font-size,<span class=\"hljs-number\">32</span>);\n    background-color:<span class=\"hljs-meta\">#E36264;</span>\n    width:<span class=\"hljs-number\">100</span>px;\n    height:<span class=\"hljs-number\">200</span>px;\n}\n\n\n<span class=\"hljs-comment\">//最终生成的css</span>\n.orderList {\n  font-size: <span class=\"hljs-number\">0.42666667</span>rem;\n  background-color: <span class=\"hljs-meta\">#E36264;</span>\n  width: <span class=\"hljs-number\">100</span>px;\n  height: <span class=\"hljs-number\">200</span>px;\n}\n</code></pre>\n<h4>less这么好用怎么用？？</h4>\n<ul>\n<li>在浏览器端用</li>\n</ul>\n<pre class=\"hljs javascript\"><code class=\"javascript\">&lt;link rel=<span class=\"hljs-string\">\"stylesheet/less\"</span> type=<span class=\"hljs-string\">\"text/css\"</span> href=<span class=\"hljs-string\">\"index.less\"</span> />\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"js/less.2.5.3.js\"</span>></span><span class=\"undefined\"/><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>></span></span>\n<span class=\"hljs-comment\">//注：</span>\n<span class=\"hljs-number\">1</span>、顺序不能错\n<span class=\"hljs-number\">2</span>、设置属性 rel=<span class=\"hljs-string\">\"stylesheet/less\"</span> \n<span class=\"hljs-number\">3</span>、代码需要服务器环境运行\n</code></pre>\n<ul>\n<li>编译之后引用css文件<br/>\n我推荐使用Koala.exe <a href=\"https://link.jianshu.com?t=http://koala-app.com/\" target=\"_blank\" rel=\"nofollow\">下载地址</a><br/>\n<strong>多语言支持</strong> 支持Less、Sass、CoffeeScript 和 Compass Framework。<br/>\n<strong>实时编译</strong> 监听文件，当文件改变时自动执行编译，这一切都在后台运行，无需人工操作。<br/>\n<strong>编译选项</strong> 可以设置各个语言的编译选项。<br/>\n<strong>项目配置</strong> 支持为项目创建一个全局配置，为文件设置统一编译选项。<br/>\n<strong>错误提示</strong> 在编译时如果遇到语法的错误，koala将在右下角弹出错误信息，方便开发者定位代码错误位置。<br/>\n<strong>跨平台</strong> Windows、Linux、Mac都能完美运行。</li>\n</ul>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 558px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 61.92999999999999%;\"/>\n<div class=\"image-view\" data-width=\"901\" data-height=\"558\"><img src=\"//upload-images.jianshu.io/upload_images/2180072-196d50bd310ada62.png\" data-original-width=\"901\" data-original-height=\"558\" data-original-format=\"image/png\" data-original-filesize=\"50345\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">koala.png</div>\n</div>\n<ul>\n<li>设置语言</li>\n</ul>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 556px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 61.78%;\"/>\n<div class=\"image-view\" data-width=\"900\" data-height=\"556\"><img src=\"//upload-images.jianshu.io/upload_images/2180072-c445ab66895dc9dd.png\" data-original-width=\"900\" data-original-height=\"556\" data-original-format=\"image/png\" data-original-filesize=\"38977\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">lang.png</div>\n</div>\n<ul>\n<li>添加项目</li>\n</ul>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 553px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 61.72%;\"/>\n<div class=\"image-view\" data-width=\"896\" data-height=\"553\"><img src=\"//upload-images.jianshu.io/upload_images/2180072-93173ab3e9f68b8f.png\" data-original-width=\"896\" data-original-height=\"553\" data-original-format=\"image/png\" data-original-filesize=\"56021\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Paste_Image.png</div>\n</div>\n<ul>\n<li>编译less文件<br/>\n手动运行 【执行编译】或者点击文件勾选自动编译，它会自动检测文件更改并重新编译</li>\n</ul>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 556px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 61.919999999999995%;\"/>\n<div class=\"image-view\" data-width=\"898\" data-height=\"556\"><img src=\"//upload-images.jianshu.io/upload_images/2180072-cfb7bfbeb616a607.png\" data-original-width=\"898\" data-original-height=\"556\" data-original-format=\"image/png\" data-original-filesize=\"82836\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">Paste_Image.png</div>\n</div>\n<h3>其他用法参见 <a href=\"https://link.jianshu.com?t=http://lesscss.cn/\" target=\"_blank\" rel=\"nofollow\">LESS官网</a>\n</h3>\n\n          ', '0', '2016-09-27 18:23:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('19', '好玩的CSS动效~', '\n      Loading动画-01 Loading动画-02 蚀刻文本 渐变字 悬停下划线动画 鼠标光标梯度跟踪 溢出滚动渐变 漂亮的文字下划线 简单的导航栏特效 后序 本文中所有的动...\n    ', '\n            <blockquote>\n<p>Loading动画-01</p>\n</blockquote>\n<pre class=\"hljs xml\"><code class=\"xml\">@keyframes bouncing-loader {\n  from {\n    opacity: 1;\n    transform: translateY(0);\n  }\n  to {\n    opacity: 0.1;\n    transform: translateY(-1rem);\n  }\n}\n.bouncing-loader {\n  display: flex;\n  justify-content: center;\n}\n.bouncing-loader > div {\n  width: 1rem;\n  height: 1rem;\n  margin: 3rem 0.2rem;\n  background: #8385aa;\n  border-radius: 50%;\n  animation: bouncing-loader 0.6s infinite alternate;\n}\n.bouncing-loader > div:nth-of-type(2) {\n  animation-delay: 0.2s;\n}\n.bouncing-loader > div:nth-of-type(3) {\n  animation-delay: 0.4s;\n}\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bouncing-loader\"</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 294px; max-height: 238px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 80.95%;\"/>\n<div class=\"image-view\" data-width=\"294\" data-height=\"238\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-0f59d4df29bf9fee.gif\" data-original-width=\"294\" data-original-height=\"238\" data-original-format=\"image/gif\" data-original-filesize=\"10334\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">loading效果图1</div>\n</div>\n<blockquote>\n<p>Loading动画-02</p>\n</blockquote>\n<pre class=\"hljs cpp\"><code class=\"cpp\">@keyframes donut-spin {\n  <span class=\"hljs-number\">0</span>% {\n    transform: rotate(<span class=\"hljs-number\">0</span>deg);\n  }\n  <span class=\"hljs-number\">100</span>% {\n    transform: rotate(<span class=\"hljs-number\">360</span>deg);\n  }\n}\n.donut {\n  display: <span class=\"hljs-keyword\">inline</span>-block;\n  border: <span class=\"hljs-number\">4</span><span class=\"hljs-function\">px solid <span class=\"hljs-title\">rgba</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>)</span></span>;\n  border-left-color: #<span class=\"hljs-number\">7983f</span>f;\n  border-radius: <span class=\"hljs-number\">50</span>%;\n  width: <span class=\"hljs-number\">30</span>px;\n  height: <span class=\"hljs-number\">30</span>px;\n  animation: donut-spin <span class=\"hljs-number\">1.2</span>s linear infinite;\n}\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">donut</span>\">&lt;/div>\n</span></code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 294px; max-height: 238px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 80.95%;\"/>\n<div class=\"image-view\" data-width=\"294\" data-height=\"238\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-0b784dcb6ed3027f.gif\" data-original-width=\"294\" data-original-height=\"238\" data-original-format=\"image/gif\" data-original-filesize=\"8078\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">loading效果图2</div>\n</div>\n<blockquote>\n<p>蚀刻文本</p>\n</blockquote>\n<pre class=\"hljs xml\"><code class=\"xml\">.etched-text {\n  text-shadow: 0 2px white;\n  font-size: 1.5rem;\n  font-weight: bold;\n  color: #b8bec5;\n}\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"etched-text\"</span>></span>I appear etched into the background.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 462px; max-height: 102px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 22.08%;\"/>\n<div class=\"image-view\" data-width=\"462\" data-height=\"102\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-9c8722c4f4f83b24.png\" data-original-width=\"462\" data-original-height=\"102\" data-original-format=\"image/png\" data-original-filesize=\"5308\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">蚀刻文本效果图</div>\n</div>\n<blockquote>\n<p>渐变字</p>\n</blockquote>\n<pre class=\"hljs xml\"><code class=\"xml\">.gradient-text {\n  background: -webkit-linear-gradient(skyblue, cornflowerblue);\n  -webkit-text-fill-color: transparent;\n  -webkit-background-clip: text;\n}\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"gradient-text\"</span>></span>Gradient text<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 322px; max-height: 75px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 23.29%;\"/>\n<div class=\"image-view\" data-width=\"322\" data-height=\"75\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-4a82b022ec639e33.png\" data-original-width=\"322\" data-original-height=\"75\" data-original-format=\"image/png\" data-original-filesize=\"9619\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">image.png</div>\n</div>\n<blockquote>\n<p>悬停下划线动画</p>\n</blockquote>\n<pre class=\"hljs bash\"><code class=\"bash\">.hover-underline-animation {\n  display: inline-block;\n  position: relative;\n  color: <span class=\"hljs-comment\">#0087ca;</span>\n}\n.hover-underline-animation::after {\n  content: <span class=\"hljs-string\">\'\'</span>;\n  position: absolute;\n  width: 100%;\n  transform: scaleX(0);\n  height: 2px;\n  bottom: 0;\n  left: 0;\n  background-color: <span class=\"hljs-comment\">#0087ca;</span>\n  transform-origin: bottom right;\n  transition: transform 0.25s ease-out;\n}\n.hover-underline-animation:hover::after {\n  transform: scaleX(1);\n  transform-origin: bottom left;\n}\n\n&lt;p class=<span class=\"hljs-string\">\"hover-underline-animation\"</span>>Hover this text to see the effect!&lt;/p>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 495px; max-height: 233px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 47.07%;\"/>\n<div class=\"image-view\" data-width=\"495\" data-height=\"233\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-d2329b41ee915313.gif\" data-original-width=\"495\" data-original-height=\"233\" data-original-format=\"image/gif\" data-original-filesize=\"5103\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">效果图</div>\n</div>\n<blockquote>\n<p>鼠标光标梯度跟踪</p>\n</blockquote>\n<pre class=\"hljs bash\"><code class=\"bash\">.mouse-cursor-gradient-tracking {\n  position: relative;\n  background: <span class=\"hljs-comment\">#7983ff;</span>\n  padding: 0.5rem 1rem;\n  font-size: 1.2rem;\n  border: none;\n  color: white;\n  cursor: pointer;\n  outline: none;\n  overflow: hidden;\n}\n.mouse-cursor-gradient-tracking span {\n  position: relative;\n}\n.mouse-cursor-gradient-tracking::before {\n  --size: 0;\n  content: <span class=\"hljs-string\">\'\'</span>;\n  position: absolute;\n  left: var(--x);\n  top: var(--y);\n  width: var(--size);\n  height: var(--size);\n  background: radial-gradient(circle closest-side, pink, transparent);\n  transform: translate(-50%, -50%);\n  transition: width 0.2s ease, height 0.2s ease;\n}\n.mouse-cursor-gradient-tracking:hover::before {\n  --size: 200px;\n}\n\n&lt;button class=<span class=\"hljs-string\">\"mouse-cursor-gradient-tracking\"</span>>\n  &lt;span>Hover me&lt;/span>\n&lt;/button>\n\nvar btn = document.querySelector(<span class=\"hljs-string\">\'.mouse-cursor-gradient-tracking\'</span>)\nbtn.onmousemove = <span class=\"hljs-keyword\">function</span>(e) {\n  var x = e.pageX - btn.offsetLeft\n  var y = e.pageY - btn.offsetTop\n  btn.style.setProperty(<span class=\"hljs-string\">\'--x\'</span>, x + <span class=\"hljs-string\">\'px\'</span>)\n  btn.style.setProperty(<span class=\"hljs-string\">\'--y\'</span>, y + <span class=\"hljs-string\">\'px\'</span>)\n}\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 313px; max-height: 233px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 74.44%;\"/>\n<div class=\"image-view\" data-width=\"313\" data-height=\"233\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-e0f8eb42b8f7fe6c.gif\" data-original-width=\"313\" data-original-height=\"233\" data-original-format=\"image/gif\" data-original-filesize=\"208400\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">鼠标跟随动画</div>\n</div>\n<blockquote>\n<p>溢出滚动渐变</p>\n</blockquote>\n<pre class=\"hljs xml\"><code class=\"xml\">.overflow-scroll-gradient {\n  position: relative;\n}\n.overflow-scroll-gradient::after {\n  content: \'\';\n  position: absolute;\n  bottom: 0;\n  width: 240px;\n  height: 25px;\n  background: linear-gradient(\n    rgba(255, 255, 255, 0.001),\n    white\n  ); /* transparent keyword is broken in Safari */\n  pointer-events: none;\n}\n.overflow-scroll-gradient__scroller {\n  overflow-y: scroll;\n  background: white;\n  width: 240px;\n  height: 200px;\n  padding: 15px 0;\n  line-height: 1.2;\n  text-align: center;\n}\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"overflow-scroll-gradient\"</span>></span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"overflow-scroll-gradient__scroller\"</span>></span>\n    Content to be scrolled\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 253px; max-height: 215px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 84.98%;\"/>\n<div class=\"image-view\" data-width=\"253\" data-height=\"215\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-f6969ad5f22a2223.png\" data-original-width=\"253\" data-original-height=\"215\" data-original-format=\"image/png\" data-original-filesize=\"6362\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">溢出滚动渐变</div>\n</div>\n<blockquote>\n<p>漂亮的文字下划线</p>\n</blockquote>\n<pre class=\"hljs cpp\"><code class=\"cpp\">.pretty-text-underline {\n  font-family: Arial, sans-serif;\n  display: <span class=\"hljs-keyword\">inline</span>;\n  font-size: <span class=\"hljs-number\">18</span>px;\n  text-shadow: <span class=\"hljs-number\">1</span>px <span class=\"hljs-number\">1</span>px <span class=\"hljs-number\">0</span> #f5f6f9, <span class=\"hljs-number\">-1</span>px <span class=\"hljs-number\">1</span>px <span class=\"hljs-number\">0</span> #f5f6f9, <span class=\"hljs-number\">-1</span>px <span class=\"hljs-number\">-1</span>px <span class=\"hljs-number\">0</span> #f5f6f9, <span class=\"hljs-number\">1</span>px <span class=\"hljs-number\">-1</span>px <span class=\"hljs-number\">0</span> #f5f6f9;\n  background-image: linear-gradient(<span class=\"hljs-number\">90</span>deg, currentColor <span class=\"hljs-number\">100</span>%, transparent <span class=\"hljs-number\">100</span>%);\n  background-position: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.98</span>em;\n  background-repeat: repeat-x;\n  background-size: <span class=\"hljs-number\">1</span>px <span class=\"hljs-number\">1</span>px;\n}\n.pretty-text-underline::-moz-selection {\n  background-color: rgba(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.3</span>);\n  text-shadow: none;\n}\n.pretty-text-underline::selection {\n  background-color: rgba(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0.3</span>);\n  text-shadow: none;\n}\n\n&lt;p <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">pretty</span>-<span class=\"hljs-title\">text</span>-<span class=\"hljs-title\">underline</span>\"><span class=\"hljs-title\">Pretty</span> <span class=\"hljs-title\">text</span> <span class=\"hljs-title\">underline</span> <span class=\"hljs-title\">without</span> <span class=\"hljs-title\">clipping</span> <span class=\"hljs-title\">descending</span> <span class=\"hljs-title\">letters</span>.&lt;/p>\n</span></code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 478px; max-height: 52px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 10.879999999999999%;\"/>\n<div class=\"image-view\" data-width=\"478\" data-height=\"52\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-c2e461128a2f53c9.png\" data-original-width=\"478\" data-original-height=\"52\" data-original-format=\"image/png\" data-original-filesize=\"4934\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">文字下划线效果图</div>\n</div>\n<blockquote>\n<p>简单的导航栏特效</p>\n</blockquote>\n<pre class=\"hljs cpp\"><code class=\"cpp\">span {\n  padding: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>rem;\n  transition: opacity <span class=\"hljs-number\">0.2</span>s;\n}\n.sibling-fade:hover span:<span class=\"hljs-keyword\">not</span>(:hover) {\n  opacity: <span class=\"hljs-number\">0.5</span>;\n}\n\n&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-title\">sibling</span>-<span class=\"hljs-title\">fade</span>\">\n  &lt;span><span class=\"hljs-title\">Item</span> 1&lt;/span>\n  &lt;span><span class=\"hljs-title\">Item</span> 2&lt;/span>\n  &lt;span><span class=\"hljs-title\">Item</span> 3&lt;/span>\n  &lt;span><span class=\"hljs-title\">Item</span> 4&lt;/span>\n  &lt;span><span class=\"hljs-title\">Item</span> 5&lt;/span>\n  &lt;span><span class=\"hljs-title\">Item</span> 6&lt;/span>\n&lt;/div>\n</span></code></pre>\n<div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 558px; max-height: 46px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 8.24%;\"/>\n<div class=\"image-view\" data-width=\"558\" data-height=\"46\"><img src=\"//upload-images.jianshu.io/upload_images/8919399-5bdf23a16529d8f0.gif\" data-original-width=\"558\" data-original-height=\"46\" data-original-format=\"image/gif\" data-original-filesize=\"41338\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">简单的导航栏特效</div>\n</div>\n<blockquote>\n<p>后序</p>\n</blockquote>\n<p>本文中所有的动态图都是自己制作的，整理出来供大家学习和参考，喜欢的朋友麻烦给个星~谢谢。<br/>\n参考文献：<a href=\"https://link.jianshu.com?t=https%3A%2F%2Fatomiks.github.io%2F30-seconds-of-css%2F\" target=\"_blank\" rel=\"nofollow\">30 Seconds of CSS</a></p>\n\n          ', '0', '2018-03-06 16:10:00', '0000-00-00 00:00:00', '1', '0', '0');
INSERT INTO `fs_article` VALUES ('20', '超简单效果，css制作毛毛虫爬行', '\n      今天突然想起来了小时候在自家池塘边的小树上看到的毛毛虫了，我也不知道为什么，那么想起来了就写一下它爬行的动作。', '\n            <div class=\"image-package\">\n<div class=\"image-container\" style=\"max-width: 700px; max-height: 462px;\">\n<div class=\"image-container-fill\" style=\"padding-bottom: 57.11000000000001%;\"/>\n<div class=\"image-view\" data-width=\"809\" data-height=\"462\"><img src=\"//upload-images.jianshu.io/upload_images/4809664-5d0b56663906b852\" data-original-width=\"809\" data-original-height=\"462\" data-original-format=\"image/gif\" data-original-filesize=\"83766\" class=\"image-loading\" style=\"cursor: zoom-in;\"/></div>\n</div>\n<div class=\"image-caption\">web前端学习群，189394454，有视频、源码、学习方法等大量干货分享</div>\n</div><br/>\n<p>今天突然想起来了小时候在自家池塘边的小树上看到的毛毛虫了，我也不知道为什么，那么想起来了就写一下它爬行的动作。<br/>\n', '0', '2018-03-07 10:55:00', '0000-00-00 00:00:00', '1', '0', '0');

-- ----------------------------
-- Table structure for fs_article__account
-- ----------------------------
DROP TABLE IF EXISTS `fs_article__account`;
CREATE TABLE `fs_article__account` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL DEFAULT '0' COMMENT '文章ID',
  `user_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章收藏关系表';

-- ----------------------------
-- Records of fs_article__account
-- ----------------------------

-- ----------------------------
-- Table structure for fs_article__tags
-- ----------------------------
DROP TABLE IF EXISTS `fs_article__tags`;
CREATE TABLE `fs_article__tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL DEFAULT '0' COMMENT '文章',
  `tag_id` int(11) NOT NULL DEFAULT '0' COMMENT '标签ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章标签关系表';

-- ----------------------------
-- Records of fs_article__tags
-- ----------------------------

-- ----------------------------
-- Table structure for fs_classify
-- ----------------------------
DROP TABLE IF EXISTS `fs_classify`;
CREATE TABLE `fs_classify` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `classify_name` varchar(255) DEFAULT NULL COMMENT '分类名',
  `pid` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='分类';

-- ----------------------------
-- Records of fs_classify
-- ----------------------------
INSERT INTO `fs_classify` VALUES ('1', '前端', '0');
INSERT INTO `fs_classify` VALUES ('2', 'iOS', '0');
INSERT INTO `fs_classify` VALUES ('3', 'Android', '0');
INSERT INTO `fs_classify` VALUES ('4', '后端', '0');
INSERT INTO `fs_classify` VALUES ('5', '人工智能', '0');

-- ----------------------------
-- Table structure for fs_operation_logs
-- ----------------------------
DROP TABLE IF EXISTS `fs_operation_logs`;
CREATE TABLE `fs_operation_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户id',
  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名称',
  `operation_ip` varchar(255) DEFAULT NULL COMMENT '用户ip地址',
  `operation_url` varchar(255) DEFAULT NULL COMMENT '操作链接',
  `operation_method` varchar(255) DEFAULT NULL COMMENT '请求方法',
  `operation_desc` varchar(255) DEFAULT NULL COMMENT '操作详情',
  `operation_time` datetime DEFAULT NULL COMMENT '操作时间',
  `operation_state` int(11) NOT NULL DEFAULT '2' COMMENT '日志状态（1登录 /注册  2用户操作）',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=144 DEFAULT CHARSET=utf8 COMMENT='用户操作日志';

-- ----------------------------
-- Records of fs_operation_logs
-- ----------------------------
INSERT INTO `fs_operation_logs` VALUES ('1', '1', 'admin', '::1', 'insertLog', 'POST', '登录', '2018-03-20 19:00:49', '1');
INSERT INTO `fs_operation_logs` VALUES ('2', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-20 19:15:13', '1');
INSERT INTO `fs_operation_logs` VALUES ('3', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-20 19:18:35', '1');
INSERT INTO `fs_operation_logs` VALUES ('4', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-20 19:25:47', '1');
INSERT INTO `fs_operation_logs` VALUES ('5', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-20 19:37:02', '1');
INSERT INTO `fs_operation_logs` VALUES ('6', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-20 19:37:27', '1');
INSERT INTO `fs_operation_logs` VALUES ('7', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 11:13:35', '1');
INSERT INTO `fs_operation_logs` VALUES ('8', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 11:14:41', '1');
INSERT INTO `fs_operation_logs` VALUES ('9', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 11:24:51', '1');
INSERT INTO `fs_operation_logs` VALUES ('10', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 11:35:04', '1');
INSERT INTO `fs_operation_logs` VALUES ('11', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 11:40:03', '1');
INSERT INTO `fs_operation_logs` VALUES ('12', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 13:09:41', '1');
INSERT INTO `fs_operation_logs` VALUES ('13', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:10:39', '1');
INSERT INTO `fs_operation_logs` VALUES ('14', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:12:56', '1');
INSERT INTO `fs_operation_logs` VALUES ('15', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:13:54', '1');
INSERT INTO `fs_operation_logs` VALUES ('16', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:14:23', '1');
INSERT INTO `fs_operation_logs` VALUES ('17', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:15:04', '1');
INSERT INTO `fs_operation_logs` VALUES ('18', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:17:13', '1');
INSERT INTO `fs_operation_logs` VALUES ('19', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:23:03', '1');
INSERT INTO `fs_operation_logs` VALUES ('20', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:23:29', '1');
INSERT INTO `fs_operation_logs` VALUES ('21', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:24:15', '1');
INSERT INTO `fs_operation_logs` VALUES ('22', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:24:49', '1');
INSERT INTO `fs_operation_logs` VALUES ('23', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:25:46', '1');
INSERT INTO `fs_operation_logs` VALUES ('24', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:25:45', '1');
INSERT INTO `fs_operation_logs` VALUES ('25', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:27:12', '1');
INSERT INTO `fs_operation_logs` VALUES ('26', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:30:58', '1');
INSERT INTO `fs_operation_logs` VALUES ('27', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:34:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('28', '1', 'admin', null, '/common/sigin', 'POST', '登录', '2018-03-21 14:39:17', '1');
INSERT INTO `fs_operation_logs` VALUES ('29', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:39:28', '1');
INSERT INTO `fs_operation_logs` VALUES ('30', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:44:02', '1');
INSERT INTO `fs_operation_logs` VALUES ('31', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:47:03', '1');
INSERT INTO `fs_operation_logs` VALUES ('32', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:47:14', '1');
INSERT INTO `fs_operation_logs` VALUES ('33', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 14:49:17', '1');
INSERT INTO `fs_operation_logs` VALUES ('34', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:00:35', '1');
INSERT INTO `fs_operation_logs` VALUES ('35', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:00:54', '1');
INSERT INTO `fs_operation_logs` VALUES ('36', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:02:34', '1');
INSERT INTO `fs_operation_logs` VALUES ('37', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:08:18', '1');
INSERT INTO `fs_operation_logs` VALUES ('38', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:17:43', '1');
INSERT INTO `fs_operation_logs` VALUES ('39', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:18:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('40', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:23:45', '1');
INSERT INTO `fs_operation_logs` VALUES ('41', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:25:11', '1');
INSERT INTO `fs_operation_logs` VALUES ('42', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:27:10', '1');
INSERT INTO `fs_operation_logs` VALUES ('43', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:37:22', '1');
INSERT INTO `fs_operation_logs` VALUES ('44', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:40:19', '1');
INSERT INTO `fs_operation_logs` VALUES ('45', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:42:34', '1');
INSERT INTO `fs_operation_logs` VALUES ('46', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:43:16', '1');
INSERT INTO `fs_operation_logs` VALUES ('47', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:54:38', '1');
INSERT INTO `fs_operation_logs` VALUES ('48', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 15:59:06', '1');
INSERT INTO `fs_operation_logs` VALUES ('49', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:02:49', '1');
INSERT INTO `fs_operation_logs` VALUES ('50', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:10:45', '1');
INSERT INTO `fs_operation_logs` VALUES ('51', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:12:35', '1');
INSERT INTO `fs_operation_logs` VALUES ('52', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:13:02', '1');
INSERT INTO `fs_operation_logs` VALUES ('53', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:16:42', '1');
INSERT INTO `fs_operation_logs` VALUES ('54', '1', 'admin', '::1', '/common/exit', 'POST', '退出登录', '2018-03-21 16:16:47', '1');
INSERT INTO `fs_operation_logs` VALUES ('55', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:17:01', '1');
INSERT INTO `fs_operation_logs` VALUES ('56', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:20:44', '1');
INSERT INTO `fs_operation_logs` VALUES ('57', '1', 'admin', '::1', '/common/exit', 'POST', '退出登录', '2018-03-21 16:24:55', '1');
INSERT INTO `fs_operation_logs` VALUES ('58', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:25:03', '1');
INSERT INTO `fs_operation_logs` VALUES ('60', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 16:50:05', '1');
INSERT INTO `fs_operation_logs` VALUES ('61', '1', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 17:08:36', '1');
INSERT INTO `fs_operation_logs` VALUES ('63', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 17:20:54', '1');
INSERT INTO `fs_operation_logs` VALUES ('64', '1', 'admin', '::1', '/deleteuser', 'POST', '删除用户', '2018-03-21 17:34:17', '2');
INSERT INTO `fs_operation_logs` VALUES ('65', '1', 'admin', '::1', '/deleteuser', 'POST', '删除用户', '2018-03-21 17:36:11', '2');
INSERT INTO `fs_operation_logs` VALUES ('66', '1', 'admin', '::1', '/deleteuser', 'POST', '删除用户', '2018-03-21 17:38:16', '2');
INSERT INTO `fs_operation_logs` VALUES ('67', '8', 'admin', '::1', '/common/exit', 'POST', '退出登录', '2018-03-21 17:50:56', '1');
INSERT INTO `fs_operation_logs` VALUES ('68', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 17:52:23', '1');
INSERT INTO `fs_operation_logs` VALUES ('69', '8', 'admin', '::1', '/common/exit', 'POST', '退出登录', '2018-03-21 17:53:04', '1');
INSERT INTO `fs_operation_logs` VALUES ('70', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 17:53:11', '1');
INSERT INTO `fs_operation_logs` VALUES ('71', '8', 'admin', '::1', '/common/exit', 'POST', '退出登录', '2018-03-21 18:08:43', '1');
INSERT INTO `fs_operation_logs` VALUES ('72', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 18:09:14', '1');
INSERT INTO `fs_operation_logs` VALUES ('73', '1', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-21 18:10:04', '2');
INSERT INTO `fs_operation_logs` VALUES ('74', '1', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-21 18:10:33', '2');
INSERT INTO `fs_operation_logs` VALUES ('75', '1', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-21 18:10:58', '2');
INSERT INTO `fs_operation_logs` VALUES ('76', '1', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-21 18:12:03', '2');
INSERT INTO `fs_operation_logs` VALUES ('77', '1', 'admin', '::1', '/deleteuser', 'POST', '删除用户', '2018-03-21 18:14:16', '2');
INSERT INTO `fs_operation_logs` VALUES ('78', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 18:25:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('79', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 18:46:05', '1');
INSERT INTO `fs_operation_logs` VALUES ('80', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 18:50:01', '1');
INSERT INTO `fs_operation_logs` VALUES ('81', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 18:57:10', '1');
INSERT INTO `fs_operation_logs` VALUES ('82', '8', 'admin', '::1', '/common/sigin', 'POST', '登录', '2018-03-21 19:01:17', '1');
INSERT INTO `fs_operation_logs` VALUES ('83', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:07:06', '1');
INSERT INTO `fs_operation_logs` VALUES ('84', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:13:50', '1');
INSERT INTO `fs_operation_logs` VALUES ('85', '8', 'admin', '::1', '/deleteuser', 'POST', '删除用户', '2018-03-21 19:14:37', '2');
INSERT INTO `fs_operation_logs` VALUES ('86', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:16:37', '1');
INSERT INTO `fs_operation_logs` VALUES ('87', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:25:06', '1');
INSERT INTO `fs_operation_logs` VALUES ('88', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:27:50', '1');
INSERT INTO `fs_operation_logs` VALUES ('89', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:31:23', '1');
INSERT INTO `fs_operation_logs` VALUES ('90', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:32:41', '1');
INSERT INTO `fs_operation_logs` VALUES ('91', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:34:53', '1');
INSERT INTO `fs_operation_logs` VALUES ('92', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:35:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('93', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:38:49', '1');
INSERT INTO `fs_operation_logs` VALUES ('94', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:47:43', '1');
INSERT INTO `fs_operation_logs` VALUES ('95', '8', 'admin', '::1', '/api/exit', 'GET', '退出登录', '2018-03-21 19:54:21', '1');
INSERT INTO `fs_operation_logs` VALUES ('96', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:56:17', '1');
INSERT INTO `fs_operation_logs` VALUES ('97', '8', 'admin', '::1', '/api/exit', 'GET', '退出登录', '2018-03-21 19:56:19', '1');
INSERT INTO `fs_operation_logs` VALUES ('98', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 19:59:10', '1');
INSERT INTO `fs_operation_logs` VALUES ('99', '8', 'admin', '::1', '/api/exit', 'POST', '退出登录', '2018-03-21 19:59:12', '1');
INSERT INTO `fs_operation_logs` VALUES ('100', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:01:29', '1');
INSERT INTO `fs_operation_logs` VALUES ('101', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:02:29', '1');
INSERT INTO `fs_operation_logs` VALUES ('102', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:02:41', '1');
INSERT INTO `fs_operation_logs` VALUES ('103', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:04:44', '1');
INSERT INTO `fs_operation_logs` VALUES ('104', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:06:24', '1');
INSERT INTO `fs_operation_logs` VALUES ('105', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:06:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('106', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:08:03', '1');
INSERT INTO `fs_operation_logs` VALUES ('107', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:09:01', '1');
INSERT INTO `fs_operation_logs` VALUES ('108', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:11:07', '1');
INSERT INTO `fs_operation_logs` VALUES ('109', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:12:50', '1');
INSERT INTO `fs_operation_logs` VALUES ('110', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-21 20:12:53', '1');
INSERT INTO `fs_operation_logs` VALUES ('111', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:13:02', '1');
INSERT INTO `fs_operation_logs` VALUES ('112', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-21 20:13:04', '1');
INSERT INTO `fs_operation_logs` VALUES ('113', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:14:02', '1');
INSERT INTO `fs_operation_logs` VALUES ('114', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-21 20:14:05', '1');
INSERT INTO `fs_operation_logs` VALUES ('115', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:14:33', '1');
INSERT INTO `fs_operation_logs` VALUES ('116', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-21 20:14:35', '1');
INSERT INTO `fs_operation_logs` VALUES ('117', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:16:13', '1');
INSERT INTO `fs_operation_logs` VALUES ('118', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:16:27', '1');
INSERT INTO `fs_operation_logs` VALUES ('119', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:16:37', '1');
INSERT INTO `fs_operation_logs` VALUES ('120', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-21 20:25:21', '1');
INSERT INTO `fs_operation_logs` VALUES ('121', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-21 20:25:24', '1');
INSERT INTO `fs_operation_logs` VALUES ('122', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:00:50', '1');
INSERT INTO `fs_operation_logs` VALUES ('123', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:17:14', '1');
INSERT INTO `fs_operation_logs` VALUES ('124', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:21:13', '1');
INSERT INTO `fs_operation_logs` VALUES ('125', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:23:34', '1');
INSERT INTO `fs_operation_logs` VALUES ('126', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-22 09:34:55', '1');
INSERT INTO `fs_operation_logs` VALUES ('127', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:35:06', '1');
INSERT INTO `fs_operation_logs` VALUES ('128', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:51:59', '1');
INSERT INTO `fs_operation_logs` VALUES ('129', '8', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-22 09:52:17', '2');
INSERT INTO `fs_operation_logs` VALUES ('130', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-22 09:53:01', '1');
INSERT INTO `fs_operation_logs` VALUES ('131', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:53:05', '1');
INSERT INTO `fs_operation_logs` VALUES ('132', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 09:53:27', '1');
INSERT INTO `fs_operation_logs` VALUES ('133', '8', 'admin', '::1', '/updateuser', 'POST', '修改用户资料', '2018-03-22 09:58:34', '2');
INSERT INTO `fs_operation_logs` VALUES ('134', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 10:18:26', '1');
INSERT INTO `fs_operation_logs` VALUES ('135', '8', 'admin', '::1', '/api/auth/update', 'PUT', '修改用户资料', '2018-03-22 10:18:50', '2');
INSERT INTO `fs_operation_logs` VALUES ('136', '8', 'admin', '::1', '/api/auth/update', 'PUT', '修改用户资料', '2018-03-22 10:19:06', '2');
INSERT INTO `fs_operation_logs` VALUES ('137', '8', 'admin', '::1', '/api/auth/update', 'PUT', '修改用户资料', '2018-03-22 10:19:54', '2');
INSERT INTO `fs_operation_logs` VALUES ('138', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-22 10:20:47', '1');
INSERT INTO `fs_operation_logs` VALUES ('139', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-22 10:23:27', '1');
INSERT INTO `fs_operation_logs` VALUES ('140', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 10:23:30', '1');
INSERT INTO `fs_operation_logs` VALUES ('141', '8', 'admin', '::1', '/api/user/exit', 'POST', '退出登录', '2018-03-22 10:26:50', '1');
INSERT INTO `fs_operation_logs` VALUES ('142', '8', 'admin', '::1', '/api/sigin', 'POST', '登录', '2018-03-22 10:26:51', '1');
INSERT INTO `fs_operation_logs` VALUES ('143', '8', 'admin', '::1', '/api/auth/update', 'PUT', '修改用户资料', '2018-03-22 10:26:59', '2');

-- ----------------------------
-- Table structure for fs_resources
-- ----------------------------
DROP TABLE IF EXISTS `fs_resources`;
CREATE TABLE `fs_resources` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL COMMENT '资源名称',
  `url` varchar(255) DEFAULT NULL COMMENT '路由地址',
  `icon` varchar(255) DEFAULT NULL COMMENT '图标',
  `pid` int(11) DEFAULT NULL COMMENT '父级ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='资源表';

-- ----------------------------
-- Records of fs_resources
-- ----------------------------
INSERT INTO `fs_resources` VALUES ('1', '用户', '/user', null, '0');
INSERT INTO `fs_resources` VALUES ('2', '日志', '/logs', null, '0');
INSERT INTO `fs_resources` VALUES ('3', '创建用户', null, null, '1');

-- ----------------------------
-- Table structure for fs_role
-- ----------------------------
DROP TABLE IF EXISTS `fs_role`;
CREATE TABLE `fs_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role_name` varchar(255) NOT NULL DEFAULT '' COMMENT '角色名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='角色';

-- ----------------------------
-- Records of fs_role
-- ----------------------------
INSERT INTO `fs_role` VALUES ('1', '超级管理员');
INSERT INTO `fs_role` VALUES ('2', '普通用户');

-- ----------------------------
-- Table structure for fs_role__resources
-- ----------------------------
DROP TABLE IF EXISTS `fs_role__resources`;
CREATE TABLE `fs_role__resources` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role_id` int(11) DEFAULT NULL COMMENT '角色ID',
  `resource_id` int(11) DEFAULT NULL COMMENT '资源ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='角色资源关系表';

-- ----------------------------
-- Records of fs_role__resources
-- ----------------------------
INSERT INTO `fs_role__resources` VALUES ('1', '1', '1');
INSERT INTO `fs_role__resources` VALUES ('2', '1', '3');
INSERT INTO `fs_role__resources` VALUES ('3', '1', '2');

-- ----------------------------
-- Table structure for fs_tags
-- ----------------------------
DROP TABLE IF EXISTS `fs_tags`;
CREATE TABLE `fs_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) DEFAULT NULL COMMENT '标签名',
  `tag_icon` varchar(255) DEFAULT NULL COMMENT '标签图标',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='标签';

-- ----------------------------
-- Records of fs_tags
-- ----------------------------
